{"ast":null,"code":"// import { useEffect, useState } from 'react';\n// import axios from 'axios';\n// import { useNavigate } from 'react-router-dom';\n// import {\n//   PieChart, Pie, Cell, Tooltip, Legend, BarChart, Bar,\n//   XAxis, YAxis, CartesianGrid, ResponsiveContainer\n// } from 'recharts';\n\n// interface Transaction {\n//   _id: string;\n//   date: string;\n//   amount: number;\n//   category: string;\n//   description?: string;\n//   user_id: string;\n//   status: 'Paid' | 'Pending';\n// }\n\n// function Dashboard() {\n//   const [transactions, setTransactions] = useState<Transaction[]>([]);\n//   const [filtered, setFiltered] = useState<Transaction[]>([]);\n//   const [month, setMonth] = useState('');\n//   const [status, setStatus] = useState('');\n//   const [category, setCategory] = useState('');\n//   const [user, setUser] = useState('');\n//   const [minAmount, setMinAmount] = useState('');\n//   const [maxAmount, setMaxAmount] = useState('');\n//   const [groupByWeek, setGroupByWeek] = useState(false);\n//   const [startDate, setStartDate] = useState('');\n//   const [endDate, setEndDate] = useState('');\n//   const [currentPage, setCurrentPage] = useState(1);\n//   const rowsPerPage = 10;\n//   const [error, setError] = useState('');\n//   const [search, setSearch] = useState('');\n//   const [darkMode, setDarkMode] = useState(() => {\n//     // On first load, check localStorage or system preference\n//     if (typeof window !== \"undefined\") {\n//       const stored = localStorage.getItem('dashboard-darkmode');\n//       if (stored) return stored === 'true';\n//       return window.matchMedia('(prefers-color-scheme: dark)').matches;\n//     }\n//     return false;\n//   });\n\n//   const navigate = useNavigate();\n//   const COLORS = ['#8884d8', '#82ca9d', '#ffc658', '#ff7f50', '#00c49f', '#ffb6b9'];\n\n//   // Apply dark mode class to <html>\n//   useEffect(() => {\n//     if (darkMode) {\n//       document.documentElement.classList.add('dark');\n//       localStorage.setItem('dashboard-darkmode', 'true');\n//     } else {\n//       document.documentElement.classList.remove('dark');\n//       localStorage.setItem('dashboard-darkmode', 'false');\n//     }\n//   }, [darkMode]);\n\n//   useEffect(() => {\n//     const fetchTransactions = async () => {\n//       try {\n//         const token = localStorage.getItem('token');\n//         const res = await axios.get('http://localhost:5000/api/transactions', {\n//           headers: { Authorization: `Bearer ${token}` },\n//         });\n//         const data = Array.isArray(res.data) ? res.data : res.data.transactions || [];\n//         setTransactions(data);\n//         setFiltered(data);\n//       } catch (err) {\n//         setError('Failed to load transactions');\n//       }\n//     };\n//     fetchTransactions();\n//   }, []);\n\n//   useEffect(() => {\n//     let result = [...transactions];\n\n//     if (month) result = result.filter((t) => new Date(t.date).getMonth() + 1 === Number(month));\n//     if (status) result = result.filter((t) => t.status === status);\n//     if (category) result = result.filter((t) => t.category === category);\n//     if (user) result = result.filter((t) => t.user_id === user);\n//     if (minAmount) result = result.filter((t) => t.amount >= parseFloat(minAmount));\n//     if (maxAmount) result = result.filter((t) => t.amount <= parseFloat(maxAmount));\n//     if (startDate) result = result.filter((t) => new Date(t.date) >= new Date(startDate));\n//     if (endDate) result = result.filter((t) => new Date(t.date) <= new Date(endDate));\n\n//     // Real-time search filter\n//     if (search.trim()) {\n//       const s = search.trim().toLowerCase();\n//       result = result.filter((t) =>\n//         t.user_id?.toLowerCase().includes(s) ||\n//         t.status?.toLowerCase().includes(s) ||\n//         t.category?.toLowerCase().includes(s) ||\n//         t.description?.toLowerCase().includes(s) ||\n//         t.amount.toString().includes(s) ||\n//         new Date(t.date).toLocaleDateString().toLowerCase().includes(s)\n//       );\n//     }\n\n//     setCurrentPage(1);\n//     setFiltered(result);\n//   }, [\n//     month, status, category, user, minAmount, maxAmount,\n//     startDate, endDate, transactions, search\n//   ]);\n\n//   const exportToCSV = () => {\n//     const header = 'User ID,Status,Date,Amount,Category,Description\\n';\n//     const rows = filtered\n//       .map((t) => {\n//         const date = new Date(t.date).toISOString().split('T')[0];\n//         return `${t.user_id},${t.status},${date},${t.amount},${t.category || 'N/A'},${t.description || '-'}`;\n//       })\n//       .join('\\n');\n//     const blob = new Blob([header + rows], { type: 'text/csv' });\n//     const url = URL.createObjectURL(blob);\n//     const a = document.createElement('a');\n//     a.href = url;\n//     a.download = 'transactions.csv';\n//     a.click();\n//     URL.revokeObjectURL(url);\n//   };\n\n//   const handleLogout = () => {\n//     localStorage.removeItem('token');\n//     navigate('/');\n//   };\n\n//   const uniqueCategories = Array.from(new Set(transactions.map((t) => t.category)));\n//   const uniqueUsers = Array.from(new Set(transactions.map((t) => t.user_id)));\n\n//   const getWeek = (dateStr: string) => {\n//     const date = new Date(dateStr);\n//     const firstDay = new Date(date.getFullYear(), date.getMonth(), 1);\n//     const dayOfWeek = firstDay.getDay();\n//     const adjustedDate = date.getDate() + dayOfWeek;\n//     return Math.ceil(adjustedDate / 7);\n//   };\n\n//   const categoryData = Object.entries(\n//     filtered.reduce((acc, t) => {\n//       const key = t.category || 'Uncategorized';\n//       acc[key] = (acc[key] || 0) + t.amount;\n//       return acc;\n//     }, {} as Record<string, number>)\n//   ).map(([name, value]) => ({ name, value }));\n\n//   const barData = groupByWeek\n//     ? Array.from({ length: 12 }, (_, i) => {\n//         const monthName = new Date(0, i).toLocaleString('default', { month: 'short' });\n//         const weeks = [0, 0, 0, 0, 0];\n//         filtered\n//           .filter((t) => new Date(t.date).getMonth() === i)\n//           .forEach((t) => {\n//             const week = getWeek(t.date);\n//             weeks[week - 1] += t.amount;\n//           });\n//         return { name: monthName, ...weeks.reduce((acc, val, idx) => ({ ...acc, [`W${idx + 1}`]: val }), {}) };\n//       })\n//     : Array.from({ length: 12 }, (_, i) => {\n//         const monthName = new Date(0, i).toLocaleString('default', { month: 'short' });\n//         const total = filtered\n//           .filter((t) => new Date(t.date).getMonth() === i)\n//           .reduce((sum, t) => sum + t.amount, 0);\n//         return { name: monthName, total };\n//       });\n\n//   const totalEntries = filtered.length;\n//   const totalPages = Math.ceil(totalEntries / rowsPerPage);\n//   const startIndex = (currentPage - 1) * rowsPerPage;\n//   const currentEntries = filtered.slice(startIndex, startIndex + rowsPerPage);\n\n//   // --- SUMMARY METRICS LOGIC ---\n//   const totalAmount = filtered.reduce((sum, t) => sum + t.amount, 0);\n//   const totalPaid = filtered.filter(t => t.status === 'Paid').reduce((sum, t) => sum + t.amount, 0);\n//   const totalPending = filtered.filter(t => t.status === 'Pending').reduce((sum, t) => sum + t.amount, 0);\n\n//   return (\n//     <div className=\"p-6 min-h-screen bg-gray-100 dark:bg-gray-900 transition-colors duration-300\">\n//       <div className=\"flex justify-between items-center mb-6\">\n//         <h1 className=\"text-3xl font-bold text-blue-600 dark:text-blue-300\">üìä Dashboard</h1>\n//         <div className=\"flex gap-3 items-center\">\n//           <button\n//             onClick={() => setDarkMode(d => !d)}\n//             className=\"rounded px-3 py-2 text-xl focus:outline-none bg-gray-200 dark:bg-gray-700 dark:text-yellow-300 text-gray-800 hover:bg-gray-300 dark:hover:bg-gray-600 transition\"\n//             title=\"Toggle dark mode\"\n//           >\n//             {darkMode ? '‚òÄÔ∏è' : 'üåô'}\n//           </button>\n//           <button\n//             onClick={handleLogout}\n//             className=\"bg-red-600 text-white px-4 py-2 rounded hover:bg-red-700\"\n//           >\n//             Logout\n//           </button>\n//         </div>\n//       </div>\n\n//       {/* --- REAL-TIME SEARCH INPUT --- */}\n//       <div className=\"mb-4 flex\">\n//         <input\n//           type=\"text\"\n//           className=\"w-full md:w-1/3 p-2 border border-gray-300 dark:border-gray-700 rounded shadow-sm dark:bg-gray-800 dark:text-gray-100\"\n//           placeholder=\"üîç Search transactions (user, status, amount, date, category, description)...\"\n//           value={search}\n//           onChange={e => setSearch(e.target.value)}\n//         />\n//       </div>\n\n//       {/* --- SUMMARY METRICS SECTION --- */}\n//       <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-8\">\n//         <div className=\"bg-white dark:bg-gray-800 rounded shadow p-4 flex flex-col items-center\">\n//           <span className=\"text-gray-500 dark:text-gray-400 text-sm\">Total Transactions</span>\n//           <span className=\"text-2xl font-bold text-blue-700 dark:text-blue-300\">{filtered.length}</span>\n//         </div>\n//         <div className=\"bg-white dark:bg-gray-800 rounded shadow p-4 flex flex-col items-center\">\n//           <span className=\"text-gray-500 dark:text-gray-400 text-sm\">Total Amount</span>\n//           <span className=\"text-2xl font-bold text-green-700 dark:text-green-400\">‚Çπ{totalAmount.toLocaleString()}</span>\n//         </div>\n//         <div className=\"bg-white dark:bg-gray-800 rounded shadow p-4 flex flex-col items-center\">\n//           <span className=\"text-gray-500 dark:text-gray-400 text-sm\">Paid Amount</span>\n//           <span className=\"text-2xl font-bold text-green-600 dark:text-green-300\">‚Çπ{totalPaid.toLocaleString()}</span>\n//         </div>\n//         <div className=\"bg-white dark:bg-gray-800 rounded shadow p-4 flex flex-col items-center\">\n//           <span className=\"text-gray-500 dark:text-gray-400 text-sm\">Pending Amount</span>\n//           <span className=\"text-2xl font-bold text-yellow-600 dark:text-yellow-400\">‚Çπ{totalPending.toLocaleString()}</span>\n//         </div>\n//       </div>\n//       {/* --- END SUMMARY METRICS SECTION --- */}\n\n//       {error && <p className=\"text-red-500 mb-4\">{error}</p>}\n\n//       {/* Filters */}\n//       <div className=\"grid md:grid-cols-3 lg:grid-cols-6 gap-4 mb-4\">\n//         <select className=\"p-2 border rounded dark:bg-gray-800 dark:border-gray-700 dark:text-gray-100\" value={month} onChange={(e) => setMonth(e.target.value)}>\n//           <option value=\"\">All Months</option>\n//           {Array.from({ length: 12 }, (_, i) => (\n//             <option key={i + 1} value={i + 1}>\n//               {new Date(0, i).toLocaleString('default', { month: 'long' })}\n//             </option>\n//           ))}\n//         </select>\n//         <select className=\"p-2 border rounded dark:bg-gray-800 dark:border-gray-700 dark:text-gray-100\" value={status} onChange={(e) => setStatus(e.target.value)}>\n//           <option value=\"\">All Status</option>\n//           <option value=\"Paid\">Paid</option>\n//           <option value=\"Pending\">Pending</option>\n//         </select>\n//         <select className=\"p-2 border rounded dark:bg-gray-800 dark:border-gray-700 dark:text-gray-100\" value={category} onChange={(e) => setCategory(e.target.value)}>\n//           <option value=\"\">All Categories</option>\n//           {uniqueCategories.map((cat) => (\n//             <option key={cat}>{cat}</option>\n//           ))}\n//         </select>\n//         <select className=\"p-2 border rounded dark:bg-gray-800 dark:border-gray-700 dark:text-gray-100\" value={user} onChange={(e) => setUser(e.target.value)}>\n//           <option value=\"\">All Users</option>\n//           {uniqueUsers.map((u) => (\n//             <option key={u}>{u}</option>\n//           ))}\n//         </select>\n//         <input type=\"number\" className=\"p-2 border rounded dark:bg-gray-800 dark:border-gray-700 dark:text-gray-100\" placeholder=\"Min ‚Çπ\" value={minAmount} onChange={(e) => setMinAmount(e.target.value)} />\n//         <input type=\"number\" className=\"p-2 border rounded dark:bg-gray-800 dark:border-gray-700 dark:text-gray-100\" placeholder=\"Max ‚Çπ\" value={maxAmount} onChange={(e) => setMaxAmount(e.target.value)} />\n//       </div>\n//       <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6\">\n//         <input type=\"date\" className=\"p-2 border rounded dark:bg-gray-800 dark:border-gray-700 dark:text-gray-100\" value={startDate} onChange={(e) => setStartDate(e.target.value)} />\n//         <input type=\"date\" className=\"p-2 border rounded dark:bg-gray-800 dark:border-gray-700 dark:text-gray-100\" value={endDate} onChange={(e) => setEndDate(e.target.value)} />\n//         <button onClick={exportToCSV} className=\"bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700\">Export CSV</button>\n//         <button onClick={() => {\n//           setMonth(''); setStatus(''); setCategory(''); setUser('');\n//           setMinAmount(''); setMaxAmount(''); setStartDate('');\n//           setEndDate(''); setGroupByWeek(false); setCurrentPage(1);\n//           setFiltered(transactions);\n//           setSearch('');\n//         }} className=\"bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600\">Reset Filters</button>\n//       </div>\n\n//       <label className=\"flex items-center gap-2 mb-4 text-sm dark:text-gray-300\">\n//         <input type=\"checkbox\" checked={groupByWeek} onChange={(e) => setGroupByWeek(e.target.checked)} />\n//         Group by Week\n//       </label>\n\n//       {/* Table */}\n//       <div className=\"overflow-x-auto mb-2\">\n//         <table className=\"w-full bg-white dark:bg-gray-800 rounded shadow-md\">\n//           <thead className=\"bg-blue-600 dark:bg-blue-900 text-white\">\n//             <tr>\n//               <th className=\"p-3 text-left\">User ID</th>\n//               <th className=\"p-3 text-left\">Date</th>\n//               <th className=\"p-3 text-left\">Amount (‚Çπ)</th>\n//               <th className=\"p-3 text-left\">Category</th>\n//               <th className=\"p-3 text-left\">Description</th>\n//               <th className=\"p-3 text-left\">Status</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {currentEntries.length === 0 ? (\n//               <tr>\n//                 <td colSpan={6} className=\"p-4 text-center text-gray-500 dark:text-gray-400\">No transactions found.</td>\n//               </tr>\n//             ) : (\n//               currentEntries.map((t) => (\n//                 <tr key={t._id} className=\"border-t hover:bg-gray-50 dark:hover:bg-gray-700\">\n//                   <td className=\"p-3\">{t.user_id}</td>\n//                   <td className=\"p-3\">{new Date(t.date).toLocaleDateString()}</td>\n//                   <td className=\"p-3\">‚Çπ{t.amount}</td>\n//                   <td className=\"p-3\">{t.category || 'N/A'}</td>\n//                   <td className=\"p-3\">{t.description || '-'}</td>\n//                   <td className={`p-3 font-medium ${t.status === 'Paid' ? 'text-green-600 dark:text-green-400' : 'text-yellow-600 dark:text-yellow-400'}`}>{t.status}</td>\n//                 </tr>\n//               ))\n//             )}\n//           </tbody>\n//         </table>\n//       </div>\n\n//       <div className=\"text-sm text-gray-600 dark:text-gray-300 mb-2 text-center\">\n//         Showing {startIndex + 1}‚Äì{Math.min(startIndex + rowsPerPage, totalEntries)} of {totalEntries} entries\n//       </div>\n\n//       <div className=\"flex items-center justify-center gap-4 mb-10\">\n//         <button onClick={() => setCurrentPage((p) => Math.max(1, p - 1))} className=\"px-3 py-1 bg-gray-300 dark:bg-gray-700 rounded\">\n//           Prev\n//         </button>\n//         <span className=\"dark:text-gray-200\">Page</span>\n//         <input\n//           type=\"number\"\n//           min={1}\n//           max={totalPages}\n//           value={currentPage}\n//           onChange={(e) => {\n//             const val = parseInt(e.target.value);\n//             if (!isNaN(val) && val >= 1 && val <= totalPages) {\n//               setCurrentPage(val);\n//             }\n//           }}\n//           className=\"w-16 p-1 border rounded text-center dark:bg-gray-800 dark:border-gray-700 dark:text-gray-100\"\n//         />\n//         <span className=\"dark:text-gray-200\">of {totalPages}</span>\n//         <button onClick={() => setCurrentPage((p) => Math.min(totalPages, p + 1))} className=\"px-3 py-1 bg-gray-300 dark:bg-gray-700 rounded\">\n//           Next\n//         </button>\n//       </div>\n\n//       {/* Charts */}\n//       <h2 className=\"text-xl font-semibold mt-8 mb-4 text-blue-600 dark:text-blue-300\">üìà Spending by Category</h2>\n//       <ResponsiveContainer width=\"100%\" height={300}>\n//         <PieChart>\n//           <Pie data={categoryData} dataKey=\"value\" nameKey=\"name\" cx=\"50%\" cy=\"50%\" outerRadius={100} fill=\"#8884d8\" label>\n//             {categoryData.map((_, i) => <Cell key={i} fill={COLORS[i % COLORS.length]} />)}\n//           </Pie>\n//           <Tooltip />\n//           <Legend />\n//         </PieChart>\n//       </ResponsiveContainer>\n\n//       <h2 className=\"text-xl font-semibold mt-8 mb-4 text-green-600 dark:text-green-300\">üìä Monthly Spending</h2>\n//       <ResponsiveContainer width=\"100%\" height={300}>\n//         <BarChart data={barData}>\n//           <CartesianGrid strokeDasharray=\"3 3\" />\n//           <XAxis dataKey=\"name\" stroke={darkMode ? '#ddd' : '#333'} />\n//           <YAxis stroke={darkMode ? '#ddd' : '#333'} />\n//           <Tooltip />\n//           <Legend />\n//           {groupByWeek\n//             ? ['W1', 'W2', 'W3', 'W4', 'W5'].map((w, i) => <Bar key={w} dataKey={w} fill={COLORS[i % COLORS.length]} />)\n//             : <Bar dataKey=\"total\" fill=\"#82ca9d\" />}\n//         </BarChart>\n//       </ResponsiveContainer>\n//     </div>\n//   );\n// }\n\n// export default Dashboard;\n\n//","map":{"version":3,"names":[],"sources":["C:/Users/Asus/looper-frontend/src/pages/Dashboard.tsx"],"sourcesContent":["// import { useEffect, useState } from 'react';\r\n// import axios from 'axios';\r\n// import { useNavigate } from 'react-router-dom';\r\n// import {\r\n//   PieChart, Pie, Cell, Tooltip, Legend, BarChart, Bar,\r\n//   XAxis, YAxis, CartesianGrid, ResponsiveContainer\r\n// } from 'recharts';\r\n\r\n// interface Transaction {\r\n//   _id: string;\r\n//   date: string;\r\n//   amount: number;\r\n//   category: string;\r\n//   description?: string;\r\n//   user_id: string;\r\n//   status: 'Paid' | 'Pending';\r\n// }\r\n\r\n// function Dashboard() {\r\n//   const [transactions, setTransactions] = useState<Transaction[]>([]);\r\n//   const [filtered, setFiltered] = useState<Transaction[]>([]);\r\n//   const [month, setMonth] = useState('');\r\n//   const [status, setStatus] = useState('');\r\n//   const [category, setCategory] = useState('');\r\n//   const [user, setUser] = useState('');\r\n//   const [minAmount, setMinAmount] = useState('');\r\n//   const [maxAmount, setMaxAmount] = useState('');\r\n//   const [groupByWeek, setGroupByWeek] = useState(false);\r\n//   const [startDate, setStartDate] = useState('');\r\n//   const [endDate, setEndDate] = useState('');\r\n//   const [currentPage, setCurrentPage] = useState(1);\r\n//   const rowsPerPage = 10;\r\n//   const [error, setError] = useState('');\r\n//   const [search, setSearch] = useState('');\r\n//   const [darkMode, setDarkMode] = useState(() => {\r\n//     // On first load, check localStorage or system preference\r\n//     if (typeof window !== \"undefined\") {\r\n//       const stored = localStorage.getItem('dashboard-darkmode');\r\n//       if (stored) return stored === 'true';\r\n//       return window.matchMedia('(prefers-color-scheme: dark)').matches;\r\n//     }\r\n//     return false;\r\n//   });\r\n\r\n//   const navigate = useNavigate();\r\n//   const COLORS = ['#8884d8', '#82ca9d', '#ffc658', '#ff7f50', '#00c49f', '#ffb6b9'];\r\n\r\n//   // Apply dark mode class to <html>\r\n//   useEffect(() => {\r\n//     if (darkMode) {\r\n//       document.documentElement.classList.add('dark');\r\n//       localStorage.setItem('dashboard-darkmode', 'true');\r\n//     } else {\r\n//       document.documentElement.classList.remove('dark');\r\n//       localStorage.setItem('dashboard-darkmode', 'false');\r\n//     }\r\n//   }, [darkMode]);\r\n\r\n//   useEffect(() => {\r\n//     const fetchTransactions = async () => {\r\n//       try {\r\n//         const token = localStorage.getItem('token');\r\n//         const res = await axios.get('http://localhost:5000/api/transactions', {\r\n//           headers: { Authorization: `Bearer ${token}` },\r\n//         });\r\n//         const data = Array.isArray(res.data) ? res.data : res.data.transactions || [];\r\n//         setTransactions(data);\r\n//         setFiltered(data);\r\n//       } catch (err) {\r\n//         setError('Failed to load transactions');\r\n//       }\r\n//     };\r\n//     fetchTransactions();\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     let result = [...transactions];\r\n\r\n//     if (month) result = result.filter((t) => new Date(t.date).getMonth() + 1 === Number(month));\r\n//     if (status) result = result.filter((t) => t.status === status);\r\n//     if (category) result = result.filter((t) => t.category === category);\r\n//     if (user) result = result.filter((t) => t.user_id === user);\r\n//     if (minAmount) result = result.filter((t) => t.amount >= parseFloat(minAmount));\r\n//     if (maxAmount) result = result.filter((t) => t.amount <= parseFloat(maxAmount));\r\n//     if (startDate) result = result.filter((t) => new Date(t.date) >= new Date(startDate));\r\n//     if (endDate) result = result.filter((t) => new Date(t.date) <= new Date(endDate));\r\n\r\n//     // Real-time search filter\r\n//     if (search.trim()) {\r\n//       const s = search.trim().toLowerCase();\r\n//       result = result.filter((t) =>\r\n//         t.user_id?.toLowerCase().includes(s) ||\r\n//         t.status?.toLowerCase().includes(s) ||\r\n//         t.category?.toLowerCase().includes(s) ||\r\n//         t.description?.toLowerCase().includes(s) ||\r\n//         t.amount.toString().includes(s) ||\r\n//         new Date(t.date).toLocaleDateString().toLowerCase().includes(s)\r\n//       );\r\n//     }\r\n\r\n//     setCurrentPage(1);\r\n//     setFiltered(result);\r\n//   }, [\r\n//     month, status, category, user, minAmount, maxAmount,\r\n//     startDate, endDate, transactions, search\r\n//   ]);\r\n\r\n//   const exportToCSV = () => {\r\n//     const header = 'User ID,Status,Date,Amount,Category,Description\\n';\r\n//     const rows = filtered\r\n//       .map((t) => {\r\n//         const date = new Date(t.date).toISOString().split('T')[0];\r\n//         return `${t.user_id},${t.status},${date},${t.amount},${t.category || 'N/A'},${t.description || '-'}`;\r\n//       })\r\n//       .join('\\n');\r\n//     const blob = new Blob([header + rows], { type: 'text/csv' });\r\n//     const url = URL.createObjectURL(blob);\r\n//     const a = document.createElement('a');\r\n//     a.href = url;\r\n//     a.download = 'transactions.csv';\r\n//     a.click();\r\n//     URL.revokeObjectURL(url);\r\n//   };\r\n\r\n//   const handleLogout = () => {\r\n//     localStorage.removeItem('token');\r\n//     navigate('/');\r\n//   };\r\n\r\n//   const uniqueCategories = Array.from(new Set(transactions.map((t) => t.category)));\r\n//   const uniqueUsers = Array.from(new Set(transactions.map((t) => t.user_id)));\r\n\r\n//   const getWeek = (dateStr: string) => {\r\n//     const date = new Date(dateStr);\r\n//     const firstDay = new Date(date.getFullYear(), date.getMonth(), 1);\r\n//     const dayOfWeek = firstDay.getDay();\r\n//     const adjustedDate = date.getDate() + dayOfWeek;\r\n//     return Math.ceil(adjustedDate / 7);\r\n//   };\r\n\r\n//   const categoryData = Object.entries(\r\n//     filtered.reduce((acc, t) => {\r\n//       const key = t.category || 'Uncategorized';\r\n//       acc[key] = (acc[key] || 0) + t.amount;\r\n//       return acc;\r\n//     }, {} as Record<string, number>)\r\n//   ).map(([name, value]) => ({ name, value }));\r\n\r\n//   const barData = groupByWeek\r\n//     ? Array.from({ length: 12 }, (_, i) => {\r\n//         const monthName = new Date(0, i).toLocaleString('default', { month: 'short' });\r\n//         const weeks = [0, 0, 0, 0, 0];\r\n//         filtered\r\n//           .filter((t) => new Date(t.date).getMonth() === i)\r\n//           .forEach((t) => {\r\n//             const week = getWeek(t.date);\r\n//             weeks[week - 1] += t.amount;\r\n//           });\r\n//         return { name: monthName, ...weeks.reduce((acc, val, idx) => ({ ...acc, [`W${idx + 1}`]: val }), {}) };\r\n//       })\r\n//     : Array.from({ length: 12 }, (_, i) => {\r\n//         const monthName = new Date(0, i).toLocaleString('default', { month: 'short' });\r\n//         const total = filtered\r\n//           .filter((t) => new Date(t.date).getMonth() === i)\r\n//           .reduce((sum, t) => sum + t.amount, 0);\r\n//         return { name: monthName, total };\r\n//       });\r\n\r\n//   const totalEntries = filtered.length;\r\n//   const totalPages = Math.ceil(totalEntries / rowsPerPage);\r\n//   const startIndex = (currentPage - 1) * rowsPerPage;\r\n//   const currentEntries = filtered.slice(startIndex, startIndex + rowsPerPage);\r\n\r\n//   // --- SUMMARY METRICS LOGIC ---\r\n//   const totalAmount = filtered.reduce((sum, t) => sum + t.amount, 0);\r\n//   const totalPaid = filtered.filter(t => t.status === 'Paid').reduce((sum, t) => sum + t.amount, 0);\r\n//   const totalPending = filtered.filter(t => t.status === 'Pending').reduce((sum, t) => sum + t.amount, 0);\r\n\r\n//   return (\r\n//     <div className=\"p-6 min-h-screen bg-gray-100 dark:bg-gray-900 transition-colors duration-300\">\r\n//       <div className=\"flex justify-between items-center mb-6\">\r\n//         <h1 className=\"text-3xl font-bold text-blue-600 dark:text-blue-300\">üìä Dashboard</h1>\r\n//         <div className=\"flex gap-3 items-center\">\r\n//           <button\r\n//             onClick={() => setDarkMode(d => !d)}\r\n//             className=\"rounded px-3 py-2 text-xl focus:outline-none bg-gray-200 dark:bg-gray-700 dark:text-yellow-300 text-gray-800 hover:bg-gray-300 dark:hover:bg-gray-600 transition\"\r\n//             title=\"Toggle dark mode\"\r\n//           >\r\n//             {darkMode ? '‚òÄÔ∏è' : 'üåô'}\r\n//           </button>\r\n//           <button\r\n//             onClick={handleLogout}\r\n//             className=\"bg-red-600 text-white px-4 py-2 rounded hover:bg-red-700\"\r\n//           >\r\n//             Logout\r\n//           </button>\r\n//         </div>\r\n//       </div>\r\n\r\n//       {/* --- REAL-TIME SEARCH INPUT --- */}\r\n//       <div className=\"mb-4 flex\">\r\n//         <input\r\n//           type=\"text\"\r\n//           className=\"w-full md:w-1/3 p-2 border border-gray-300 dark:border-gray-700 rounded shadow-sm dark:bg-gray-800 dark:text-gray-100\"\r\n//           placeholder=\"üîç Search transactions (user, status, amount, date, category, description)...\"\r\n//           value={search}\r\n//           onChange={e => setSearch(e.target.value)}\r\n//         />\r\n//       </div>\r\n\r\n//       {/* --- SUMMARY METRICS SECTION --- */}\r\n//       <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-8\">\r\n//         <div className=\"bg-white dark:bg-gray-800 rounded shadow p-4 flex flex-col items-center\">\r\n//           <span className=\"text-gray-500 dark:text-gray-400 text-sm\">Total Transactions</span>\r\n//           <span className=\"text-2xl font-bold text-blue-700 dark:text-blue-300\">{filtered.length}</span>\r\n//         </div>\r\n//         <div className=\"bg-white dark:bg-gray-800 rounded shadow p-4 flex flex-col items-center\">\r\n//           <span className=\"text-gray-500 dark:text-gray-400 text-sm\">Total Amount</span>\r\n//           <span className=\"text-2xl font-bold text-green-700 dark:text-green-400\">‚Çπ{totalAmount.toLocaleString()}</span>\r\n//         </div>\r\n//         <div className=\"bg-white dark:bg-gray-800 rounded shadow p-4 flex flex-col items-center\">\r\n//           <span className=\"text-gray-500 dark:text-gray-400 text-sm\">Paid Amount</span>\r\n//           <span className=\"text-2xl font-bold text-green-600 dark:text-green-300\">‚Çπ{totalPaid.toLocaleString()}</span>\r\n//         </div>\r\n//         <div className=\"bg-white dark:bg-gray-800 rounded shadow p-4 flex flex-col items-center\">\r\n//           <span className=\"text-gray-500 dark:text-gray-400 text-sm\">Pending Amount</span>\r\n//           <span className=\"text-2xl font-bold text-yellow-600 dark:text-yellow-400\">‚Çπ{totalPending.toLocaleString()}</span>\r\n//         </div>\r\n//       </div>\r\n//       {/* --- END SUMMARY METRICS SECTION --- */}\r\n\r\n//       {error && <p className=\"text-red-500 mb-4\">{error}</p>}\r\n\r\n//       {/* Filters */}\r\n//       <div className=\"grid md:grid-cols-3 lg:grid-cols-6 gap-4 mb-4\">\r\n//         <select className=\"p-2 border rounded dark:bg-gray-800 dark:border-gray-700 dark:text-gray-100\" value={month} onChange={(e) => setMonth(e.target.value)}>\r\n//           <option value=\"\">All Months</option>\r\n//           {Array.from({ length: 12 }, (_, i) => (\r\n//             <option key={i + 1} value={i + 1}>\r\n//               {new Date(0, i).toLocaleString('default', { month: 'long' })}\r\n//             </option>\r\n//           ))}\r\n//         </select>\r\n//         <select className=\"p-2 border rounded dark:bg-gray-800 dark:border-gray-700 dark:text-gray-100\" value={status} onChange={(e) => setStatus(e.target.value)}>\r\n//           <option value=\"\">All Status</option>\r\n//           <option value=\"Paid\">Paid</option>\r\n//           <option value=\"Pending\">Pending</option>\r\n//         </select>\r\n//         <select className=\"p-2 border rounded dark:bg-gray-800 dark:border-gray-700 dark:text-gray-100\" value={category} onChange={(e) => setCategory(e.target.value)}>\r\n//           <option value=\"\">All Categories</option>\r\n//           {uniqueCategories.map((cat) => (\r\n//             <option key={cat}>{cat}</option>\r\n//           ))}\r\n//         </select>\r\n//         <select className=\"p-2 border rounded dark:bg-gray-800 dark:border-gray-700 dark:text-gray-100\" value={user} onChange={(e) => setUser(e.target.value)}>\r\n//           <option value=\"\">All Users</option>\r\n//           {uniqueUsers.map((u) => (\r\n//             <option key={u}>{u}</option>\r\n//           ))}\r\n//         </select>\r\n//         <input type=\"number\" className=\"p-2 border rounded dark:bg-gray-800 dark:border-gray-700 dark:text-gray-100\" placeholder=\"Min ‚Çπ\" value={minAmount} onChange={(e) => setMinAmount(e.target.value)} />\r\n//         <input type=\"number\" className=\"p-2 border rounded dark:bg-gray-800 dark:border-gray-700 dark:text-gray-100\" placeholder=\"Max ‚Çπ\" value={maxAmount} onChange={(e) => setMaxAmount(e.target.value)} />\r\n//       </div>\r\n//       <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6\">\r\n//         <input type=\"date\" className=\"p-2 border rounded dark:bg-gray-800 dark:border-gray-700 dark:text-gray-100\" value={startDate} onChange={(e) => setStartDate(e.target.value)} />\r\n//         <input type=\"date\" className=\"p-2 border rounded dark:bg-gray-800 dark:border-gray-700 dark:text-gray-100\" value={endDate} onChange={(e) => setEndDate(e.target.value)} />\r\n//         <button onClick={exportToCSV} className=\"bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700\">Export CSV</button>\r\n//         <button onClick={() => {\r\n//           setMonth(''); setStatus(''); setCategory(''); setUser('');\r\n//           setMinAmount(''); setMaxAmount(''); setStartDate('');\r\n//           setEndDate(''); setGroupByWeek(false); setCurrentPage(1);\r\n//           setFiltered(transactions);\r\n//           setSearch('');\r\n//         }} className=\"bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600\">Reset Filters</button>\r\n//       </div>\r\n\r\n//       <label className=\"flex items-center gap-2 mb-4 text-sm dark:text-gray-300\">\r\n//         <input type=\"checkbox\" checked={groupByWeek} onChange={(e) => setGroupByWeek(e.target.checked)} />\r\n//         Group by Week\r\n//       </label>\r\n\r\n//       {/* Table */}\r\n//       <div className=\"overflow-x-auto mb-2\">\r\n//         <table className=\"w-full bg-white dark:bg-gray-800 rounded shadow-md\">\r\n//           <thead className=\"bg-blue-600 dark:bg-blue-900 text-white\">\r\n//             <tr>\r\n//               <th className=\"p-3 text-left\">User ID</th>\r\n//               <th className=\"p-3 text-left\">Date</th>\r\n//               <th className=\"p-3 text-left\">Amount (‚Çπ)</th>\r\n//               <th className=\"p-3 text-left\">Category</th>\r\n//               <th className=\"p-3 text-left\">Description</th>\r\n//               <th className=\"p-3 text-left\">Status</th>\r\n//             </tr>\r\n//           </thead>\r\n//           <tbody>\r\n//             {currentEntries.length === 0 ? (\r\n//               <tr>\r\n//                 <td colSpan={6} className=\"p-4 text-center text-gray-500 dark:text-gray-400\">No transactions found.</td>\r\n//               </tr>\r\n//             ) : (\r\n//               currentEntries.map((t) => (\r\n//                 <tr key={t._id} className=\"border-t hover:bg-gray-50 dark:hover:bg-gray-700\">\r\n//                   <td className=\"p-3\">{t.user_id}</td>\r\n//                   <td className=\"p-3\">{new Date(t.date).toLocaleDateString()}</td>\r\n//                   <td className=\"p-3\">‚Çπ{t.amount}</td>\r\n//                   <td className=\"p-3\">{t.category || 'N/A'}</td>\r\n//                   <td className=\"p-3\">{t.description || '-'}</td>\r\n//                   <td className={`p-3 font-medium ${t.status === 'Paid' ? 'text-green-600 dark:text-green-400' : 'text-yellow-600 dark:text-yellow-400'}`}>{t.status}</td>\r\n//                 </tr>\r\n//               ))\r\n//             )}\r\n//           </tbody>\r\n//         </table>\r\n//       </div>\r\n\r\n//       <div className=\"text-sm text-gray-600 dark:text-gray-300 mb-2 text-center\">\r\n//         Showing {startIndex + 1}‚Äì{Math.min(startIndex + rowsPerPage, totalEntries)} of {totalEntries} entries\r\n//       </div>\r\n\r\n//       <div className=\"flex items-center justify-center gap-4 mb-10\">\r\n//         <button onClick={() => setCurrentPage((p) => Math.max(1, p - 1))} className=\"px-3 py-1 bg-gray-300 dark:bg-gray-700 rounded\">\r\n//           Prev\r\n//         </button>\r\n//         <span className=\"dark:text-gray-200\">Page</span>\r\n//         <input\r\n//           type=\"number\"\r\n//           min={1}\r\n//           max={totalPages}\r\n//           value={currentPage}\r\n//           onChange={(e) => {\r\n//             const val = parseInt(e.target.value);\r\n//             if (!isNaN(val) && val >= 1 && val <= totalPages) {\r\n//               setCurrentPage(val);\r\n//             }\r\n//           }}\r\n//           className=\"w-16 p-1 border rounded text-center dark:bg-gray-800 dark:border-gray-700 dark:text-gray-100\"\r\n//         />\r\n//         <span className=\"dark:text-gray-200\">of {totalPages}</span>\r\n//         <button onClick={() => setCurrentPage((p) => Math.min(totalPages, p + 1))} className=\"px-3 py-1 bg-gray-300 dark:bg-gray-700 rounded\">\r\n//           Next\r\n//         </button>\r\n//       </div>\r\n\r\n//       {/* Charts */}\r\n//       <h2 className=\"text-xl font-semibold mt-8 mb-4 text-blue-600 dark:text-blue-300\">üìà Spending by Category</h2>\r\n//       <ResponsiveContainer width=\"100%\" height={300}>\r\n//         <PieChart>\r\n//           <Pie data={categoryData} dataKey=\"value\" nameKey=\"name\" cx=\"50%\" cy=\"50%\" outerRadius={100} fill=\"#8884d8\" label>\r\n//             {categoryData.map((_, i) => <Cell key={i} fill={COLORS[i % COLORS.length]} />)}\r\n//           </Pie>\r\n//           <Tooltip />\r\n//           <Legend />\r\n//         </PieChart>\r\n//       </ResponsiveContainer>\r\n\r\n//       <h2 className=\"text-xl font-semibold mt-8 mb-4 text-green-600 dark:text-green-300\">üìä Monthly Spending</h2>\r\n//       <ResponsiveContainer width=\"100%\" height={300}>\r\n//         <BarChart data={barData}>\r\n//           <CartesianGrid strokeDasharray=\"3 3\" />\r\n//           <XAxis dataKey=\"name\" stroke={darkMode ? '#ddd' : '#333'} />\r\n//           <YAxis stroke={darkMode ? '#ddd' : '#333'} />\r\n//           <Tooltip />\r\n//           <Legend />\r\n//           {groupByWeek\r\n//             ? ['W1', 'W2', 'W3', 'W4', 'W5'].map((w, i) => <Bar key={w} dataKey={w} fill={COLORS[i % COLORS.length]} />)\r\n//             : <Bar dataKey=\"total\" fill=\"#82ca9d\" />}\r\n//         </BarChart>\r\n//       </ResponsiveContainer>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default Dashboard;\r\n\r\n\r\n// "],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}