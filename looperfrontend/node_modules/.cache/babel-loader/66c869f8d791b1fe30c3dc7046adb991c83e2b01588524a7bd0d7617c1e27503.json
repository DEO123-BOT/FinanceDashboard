{"ast":null,"code":"// das\n\n// import { useEffect, useState } from 'react';\n// import axios from 'axios';\n// import { useNavigate } from 'react-router-dom';\n// import {\n//   PieChart, Pie, Cell, Tooltip, Legend, BarChart, Bar,\n//   XAxis, YAxis, CartesianGrid, ResponsiveContainer\n// } from 'recharts';\n\n// interface Transaction {\n//   _id: string;\n//   date: string;\n//   amount: number;\n//   category: string;\n//   description?: string;\n//   user_id: string;\n//   status: 'Paid' | 'Pending';\n// }\n\n// function Dashboard() {\n//   const [transactions, setTransactions] = useState<Transaction[]>([]);\n//   const [filtered, setFiltered] = useState<Transaction[]>([]);\n//   const [month, setMonth] = useState('');\n//   const [status, setStatus] = useState('');\n//   const [category, setCategory] = useState('');\n//   const [user, setUser] = useState('');\n//   const [minAmount, setMinAmount] = useState('');\n//   const [maxAmount, setMaxAmount] = useState('');\n//   const [groupByWeek, setGroupByWeek] = useState(false);\n//   const [startDate, setStartDate] = useState('');\n//   const [endDate, setEndDate] = useState('');\n//   const [currentPage, setCurrentPage] = useState(1);\n//   const rowsPerPage = 10;\n//   const [error, setError] = useState('');\n//   const [search, setSearch] = useState('');\n//   const [darkMode, setDarkMode] = useState(() => {\n//     // On first load, check localStorage or system preference\n//     if (typeof window !== \"undefined\") {\n//       const stored = localStorage.getItem('dashboard-darkmode');\n//       if (stored) return stored === 'true';\n//       return window.matchMedia('(prefers-color-scheme: dark)').matches;\n//     }\n//     return false;\n//   });\n\n//   const navigate = useNavigate();\n//   const COLORS = ['#8884d8', '#82ca9d', '#ffc658', '#ff7f50', '#00c49f', '#ffb6b9'];\n\n//   // Apply dark mode class to <html>\n//   useEffect(() => {\n//     if (darkMode) {\n//       document.documentElement.classList.add('dark');\n//       localStorage.setItem('dashboard-darkmode', 'true');\n//     } else {\n//       document.documentElement.classList.remove('dark');\n//       localStorage.setItem('dashboard-darkmode', 'false');\n//     }\n//   }, [darkMode]);\n\n//   useEffect(() => {\n//     const fetchTransactions = async () => {\n//       try {\n//         const token = localStorage.getItem('token');\n//         const res = await axios.get('http://localhost:5000/api/transactions', {\n//           headers: { Authorization: `Bearer ${token}` },\n//         });\n//         const data = Array.isArray(res.data) ? res.data : res.data.transactions || [];\n//         setTransactions(data);\n//         setFiltered(data);\n//       } catch (err) {\n//         setError('Failed to load transactions');\n//       }\n//     };\n//     fetchTransactions();\n//   }, []);\n\n//   useEffect(() => {\n//     let result = [...transactions];\n\n//     if (month) result = result.filter((t) => new Date(t.date).getMonth() + 1 === Number(month));\n//     if (status) result = result.filter((t) => t.status === status);\n//     if (category) result = result.filter((t) => t.category === category);\n//     if (user) result = result.filter((t) => t.user_id === user);\n//     if (minAmount) result = result.filter((t) => t.amount >= parseFloat(minAmount));\n//     if (maxAmount) result = result.filter((t) => t.amount <= parseFloat(maxAmount));\n//     if (startDate) result = result.filter((t) => new Date(t.date) >= new Date(startDate));\n//     if (endDate) result = result.filter((t) => new Date(t.date) <= new Date(endDate));\n\n//     // Real-time search filter\n//     if (search.trim()) {\n//       const s = search.trim().toLowerCase();\n//       result = result.filter((t) =>\n//         t.user_id?.toLowerCase().includes(s) ||\n//         t.status?.toLowerCase().includes(s) ||\n//         t.category?.toLowerCase().includes(s) ||\n//         t.description?.toLowerCase().includes(s) ||\n//         t.amount.toString().includes(s) ||\n//         new Date(t.date).toLocaleDateString().toLowerCase().includes(s)\n//       );\n//     }\n\n//     setCurrentPage(1);\n//     setFiltered(result);\n//   }, [\n//     month, status, category, user, minAmount, maxAmount,\n//     startDate, endDate, transactions, search\n//   ]);\n\n//   const exportToCSV = () => {\n//     const header = 'User ID,Status,Date,Amount,Category,Description\\n';\n//     const rows = filtered\n//       .map((t) => {\n//         const date = new Date(t.date).toISOString().split('T')[0];\n//         return `${t.user_id},${t.status},${date},${t.amount},${t.category || 'N/A'},${t.description || '-'}`;\n//       })\n//       .join('\\n');\n//     const blob = new Blob([header + rows], { type: 'text/csv' });\n//     const url = URL.createObjectURL(blob);\n//     const a = document.createElement('a');\n//     a.href = url;\n//     a.download = 'transactions.csv';\n//     a.click();\n//     URL.revokeObjectURL(url);\n//   };\n\n//   const handleLogout = () => {\n//     localStorage.removeItem('token');\n//     navigate('/');\n//   };\n\n//   const uniqueCategories = Array.from(new Set(transactions.map((t) => t.category)));\n//   const uniqueUsers = Array.from(new Set(transactions.map((t) => t.user_id)));\n\n//   const getWeek = (dateStr: string) => {\n//     const date = new Date(dateStr);\n//     const firstDay = new Date(date.getFullYear(), date.getMonth(), 1);\n//     const dayOfWeek = firstDay.getDay();\n//     const adjustedDate = date.getDate() + dayOfWeek;\n//     return Math.ceil(adjustedDate / 7);\n//   };\n\n//   const categoryData = Object.entries(\n//     filtered.reduce((acc, t) => {\n//       const key = t.category || 'Uncategorized';\n//       acc[key] = (acc[key] || 0) + t.amount;\n//       return acc;\n//     }, {} as Record<string, number>)\n//   ).map(([name, value]) => ({ name, value }));\n\n//   const barData = groupByWeek\n//     ? Array.from({ length: 12 }, (_, i) => {\n//         const monthName = new Date(0, i).toLocaleString('default', { month: 'short' });\n//         const weeks = [0, 0, 0, 0, 0];\n//         filtered\n//           .filter((t) => new Date(t.date).getMonth() === i)\n//           .forEach((t) => {\n//             const week = getWeek(t.date);\n//             weeks[week - 1] += t.amount;\n//           });\n//         return { name: monthName, ...weeks.reduce((acc, val, idx) => ({ ...acc, [`W${idx + 1}`]: val }), {}) };\n//       })\n//     : Array.from({ length: 12 }, (_, i) => {\n//         const monthName = new Date(0, i).toLocaleString('default', { month: 'short' });\n//         const total = filtered\n//           .filter((t) => new Date(t.date).getMonth() === i)\n//           .reduce((sum, t) => sum + t.amount, 0);\n//         return { name: monthName, total };\n//       });\n\n//   const totalEntries = filtered.length;\n//   const totalPages = Math.ceil(totalEntries / rowsPerPage);\n//   const startIndex = (currentPage - 1) * rowsPerPage;\n//   const currentEntries = filtered.slice(startIndex, startIndex + rowsPerPage);\n\n//   // --- SUMMARY METRICS LOGIC ---\n//   const totalAmount = filtered.reduce((sum, t) => sum + t.amount, 0);\n//   const totalPaid = filtered.filter(t => t.status === 'Paid').reduce((sum, t) => sum + t.amount, 0);\n//   const totalPending = filtered.filter(t => t.status === 'Pending').reduce((sum, t) => sum + t.amount, 0);\n\n//   return (\n//     <div className=\"p-6 min-h-screen bg-gray-100 dark:bg-gray-900 transition-colors duration-300\">\n//       <div className=\"flex justify-between items-center mb-6\">\n//         <h1 className=\"text-3xl font-bold text-blue-600 dark:text-blue-300\">üìä Dashboard</h1>\n//         <div className=\"flex gap-3 items-center\">\n//           <button\n//             onClick={() => setDarkMode(d => !d)}\n//             className=\"rounded px-3 py-2 text-xl focus:outline-none bg-gray-200 dark:bg-gray-700 dark:text-yellow-300 text-gray-800 hover:bg-gray-300 dark:hover:bg-gray-600 transition\"\n//             title=\"Toggle dark mode\"\n//           >\n//             {darkMode ? '‚òÄÔ∏è' : 'üåô'}\n//           </button>\n//           <button\n//             onClick={handleLogout}\n//             className=\"bg-red-600 text-white px-4 py-2 rounded hover:bg-red-700\"\n//           >\n//             Logout\n//           </button>\n//         </div>\n//       </div>\n\n//       {/* --- REAL-TIME SEARCH INPUT --- */}\n//       <div className=\"mb-4 flex\">\n//         <input\n//           type=\"text\"\n//           className=\"w-full md:w-1/3 p-2 border border-gray-300 dark:border-gray-700 rounded shadow-sm dark:bg-gray-800 dark:text-gray-100\"\n//           placeholder=\"üîç Search transactions (user, status, amount, date, category, description)...\"\n//           value={search}\n//           onChange={e => setSearch(e.target.value)}\n//         />\n//       </div>\n\n//       {/* --- SUMMARY METRICS SECTION --- */}\n//       <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-8\">\n//         <div className=\"bg-white dark:bg-gray-800 rounded shadow p-4 flex flex-col items-center\">\n//           <span className=\"text-gray-500 dark:text-gray-400 text-sm\">Total Transactions</span>\n//           <span className=\"text-2xl font-bold text-blue-700 dark:text-blue-300\">{filtered.length}</span>\n//         </div>\n//         <div className=\"bg-white dark:bg-gray-800 rounded shadow p-4 flex flex-col items-center\">\n//           <span className=\"text-gray-500 dark:text-gray-400 text-sm\">Total Amount</span>\n//           <span className=\"text-2xl font-bold text-green-700 dark:text-green-400\">‚Çπ{totalAmount.toLocaleString()}</span>\n//         </div>\n//         <div className=\"bg-white dark:bg-gray-800 rounded shadow p-4 flex flex-col items-center\">\n//           <span className=\"text-gray-500 dark:text-gray-400 text-sm\">Paid Amount</span>\n//           <span className=\"text-2xl font-bold text-green-600 dark:text-green-300\">‚Çπ{totalPaid.toLocaleString()}</span>\n//         </div>\n//         <div className=\"bg-white dark:bg-gray-800 rounded shadow p-4 flex flex-col items-center\">\n//           <span className=\"text-gray-500 dark:text-gray-400 text-sm\">Pending Amount</span>\n//           <span className=\"text-2xl font-bold text-yellow-600 dark:text-yellow-400\">‚Çπ{totalPending.toLocaleString()}</span>\n//         </div>\n//       </div>\n//       {/* --- END SUMMARY METRICS SECTION --- */}\n\n//       {error && <p className=\"text-red-500 mb-4\">{error}</p>}\n\n//       {/* Filters */}\n//       <div className=\"grid md:grid-cols-3 lg:grid-cols-6 gap-4 mb-4\">\n//         <select className=\"p-2 border rounded dark:bg-gray-800 dark:border-gray-700 dark:text-gray-100\" value={month} onChange={(e) => setMonth(e.target.value)}>\n//           <option value=\"\">All Months</option>\n//           {Array.from({ length: 12 }, (_, i) => (\n//             <option key={i + 1} value={i + 1}>\n//               {new Date(0, i).toLocaleString('default', { month: 'long' })}\n//             </option>\n//           ))}\n//         </select>\n//         <select className=\"p-2 border rounded dark:bg-gray-800 dark:border-gray-700 dark:text-gray-100\" value={status} onChange={(e) => setStatus(e.target.value)}>\n//           <option value=\"\">All Status</option>\n//           <option value=\"Paid\">Paid</option>\n//           <option value=\"Pending\">Pending</option>\n//         </select>\n//         <select className=\"p-2 border rounded dark:bg-gray-800 dark:border-gray-700 dark:text-gray-100\" value={category} onChange={(e) => setCategory(e.target.value)}>\n//           <option value=\"\">All Categories</option>\n//           {uniqueCategories.map((cat) => (\n//             <option key={cat}>{cat}</option>\n//           ))}\n//         </select>\n//         <select className=\"p-2 border rounded dark:bg-gray-800 dark:border-gray-700 dark:text-gray-100\" value={user} onChange={(e) => setUser(e.target.value)}>\n//           <option value=\"\">All Users</option>\n//           {uniqueUsers.map((u) => (\n//             <option key={u}>{u}</option>\n//           ))}\n//         </select>\n//         <input type=\"number\" className=\"p-2 border rounded dark:bg-gray-800 dark:border-gray-700 dark:text-gray-100\" placeholder=\"Min ‚Çπ\" value={minAmount} onChange={(e) => setMinAmount(e.target.value)} />\n//         <input type=\"number\" className=\"p-2 border rounded dark:bg-gray-800 dark:border-gray-700 dark:text-gray-100\" placeholder=\"Max ‚Çπ\" value={maxAmount} onChange={(e) => setMaxAmount(e.target.value)} />\n//       </div>\n//       <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6\">\n//         <input type=\"date\" className=\"p-2 border rounded dark:bg-gray-800 dark:border-gray-700 dark:text-gray-100\" value={startDate} onChange={(e) => setStartDate(e.target.value)} />\n//         <input type=\"date\" className=\"p-2 border rounded dark:bg-gray-800 dark:border-gray-700 dark:text-gray-100\" value={endDate} onChange={(e) => setEndDate(e.target.value)} />\n//         <button onClick={exportToCSV} className=\"bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700\">Export CSV</button>\n//         <button onClick={() => {\n//           setMonth(''); setStatus(''); setCategory(''); setUser('');\n//           setMinAmount(''); setMaxAmount(''); setStartDate('');\n//           setEndDate(''); setGroupByWeek(false); setCurrentPage(1);\n//           setFiltered(transactions);\n//           setSearch('');\n//         }} className=\"bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600\">Reset Filters</button>\n//       </div>\n\n//       <label className=\"flex items-center gap-2 mb-4 text-sm dark:text-gray-300\">\n//         <input type=\"checkbox\" checked={groupByWeek} onChange={(e) => setGroupByWeek(e.target.checked)} />\n//         Group by Week\n//       </label>\n\n//       {/* Table */}\n//       <div className=\"overflow-x-auto mb-2\">\n//         <table className=\"w-full bg-white dark:bg-gray-800 rounded shadow-md\">\n//           <thead className=\"bg-blue-600 dark:bg-blue-900 text-white\">\n//             <tr>\n//               <th className=\"p-3 text-left\">User ID</th>\n//               <th className=\"p-3 text-left\">Date</th>\n//               <th className=\"p-3 text-left\">Amount (‚Çπ)</th>\n//               <th className=\"p-3 text-left\">Category</th>\n//               <th className=\"p-3 text-left\">Description</th>\n//               <th className=\"p-3 text-left\">Status</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {currentEntries.length === 0 ? (\n//               <tr>\n//                 <td colSpan={6} className=\"p-4 text-center text-gray-500 dark:text-gray-400\">No transactions found.</td>\n//               </tr>\n//             ) : (\n//               currentEntries.map((t) => (\n//                 <tr key={t._id} className=\"border-t hover:bg-gray-50 dark:hover:bg-gray-700\">\n//                   <td className=\"p-3\">{t.user_id}</td>\n//                   <td className=\"p-3\">{new Date(t.date).toLocaleDateString()}</td>\n//                   <td className=\"p-3\">‚Çπ{t.amount}</td>\n//                   <td className=\"p-3\">{t.category || 'N/A'}</td>\n//                   <td className=\"p-3\">{t.description || '-'}</td>\n//                   <td className={`p-3 font-medium ${t.status === 'Paid' ? 'text-green-600 dark:text-green-400' : 'text-yellow-600 dark:text-yellow-400'}`}>{t.status}</td>\n//                 </tr>\n//               ))\n//             )}\n//           </tbody>\n//         </table>\n//       </div>\n\n//       <div className=\"text-sm text-gray-600 dark:text-gray-300 mb-2 text-center\">\n//         Showing {startIndex + 1}‚Äì{Math.min(startIndex + rowsPerPage, totalEntries)} of {totalEntries} entries\n//       </div>\n\n//       <div className=\"flex items-center justify-center gap-4 mb-10\">\n//         <button onClick={() => setCurrentPage((p) => Math.max(1, p - 1))} className=\"px-3 py-1 bg-gray-300 dark:bg-gray-700 rounded\">\n//           Prev\n//         </button>\n//         <span className=\"dark:text-gray-200\">Page</span>\n//         <input\n//           type=\"number\"\n//           min={1}\n//           max={totalPages}\n//           value={currentPage}\n//           onChange={(e) => {\n//             const val = parseInt(e.target.value);\n//             if (!isNaN(val) && val >= 1 && val <= totalPages) {\n//               setCurrentPage(val);\n//             }\n//           }}\n//           className=\"w-16 p-1 border rounded text-center dark:bg-gray-800 dark:border-gray-700 dark:text-gray-100\"\n//         />\n//         <span className=\"dark:text-gray-200\">of {totalPages}</span>\n//         <button onClick={() => setCurrentPage((p) => Math.min(totalPages, p + 1))} className=\"px-3 py-1 bg-gray-300 dark:bg-gray-700 rounded\">\n//           Next\n//         </button>\n//       </div>\n\n//       {/* Charts */}\n//       <h2 className=\"text-xl font-semibold mt-8 mb-4 text-blue-600 dark:text-blue-300\">üìà Spending by Category</h2>\n//       <ResponsiveContainer width=\"100%\" height={300}>\n//         <PieChart>\n//           <Pie data={categoryData} dataKey=\"value\" nameKey=\"name\" cx=\"50%\" cy=\"50%\" outerRadius={100} fill=\"#8884d8\" label>\n//             {categoryData.map((_, i) => <Cell key={i} fill={COLORS[i % COLORS.length]} />)}\n//           </Pie>\n//           <Tooltip />\n//           <Legend />\n//         </PieChart>\n//       </ResponsiveContainer>\n\n//       <h2 className=\"text-xl font-semibold mt-8 mb-4 text-green-600 dark:text-green-300\">üìä Monthly Spending</h2>\n//       <ResponsiveContainer width=\"100%\" height={300}>\n//         <BarChart data={barData}>\n//           <CartesianGrid strokeDasharray=\"3 3\" />\n//           <XAxis dataKey=\"name\" stroke={darkMode ? '#ddd' : '#333'} />\n//           <YAxis stroke={darkMode ? '#ddd' : '#333'} />\n//           <Tooltip />\n//           <Legend />\n//           {groupByWeek\n//             ? ['W1', 'W2', 'W3', 'W4', 'W5'].map((w, i) => <Bar key={w} dataKey={w} fill={COLORS[i % COLORS.length]} />)\n//             : <Bar dataKey=\"total\" fill=\"#82ca9d\" />}\n//         </BarChart>\n//       </ResponsiveContainer>\n//     </div>\n//   );\n// }\n\n// export default Dashboard;\n\n// import { useEffect, useState } from 'react';\n// import axios from 'axios';\n// import { useNavigate } from 'react-router-dom';\n// import {\n//   PieChart, Pie, Cell, Tooltip, Legend, BarChart, Bar,\n//   XAxis, YAxis, CartesianGrid, ResponsiveContainer, AreaChart, Area\n// } from 'recharts';\n\n// interface Transaction {\n//   _id: string;\n//   date: string;\n//   amount: number;\n//   category: string;\n//   description?: string;\n//   user_id: string;\n//   status: 'Paid' | 'Pending';\n// }\n\n// function Dashboard() {\n//   const [transactions, setTransactions] = useState<Transaction[]>([]);\n//   const [filtered, setFiltered] = useState<Transaction[]>([]);\n//   const [month, setMonth] = useState('');\n//   const [status, setStatus] = useState('');\n//   const [category, setCategory] = useState('');\n//   const [user, setUser] = useState('');\n//   const [minAmount, setMinAmount] = useState('');\n//   const [maxAmount, setMaxAmount] = useState('');\n//   const [groupByWeek, setGroupByWeek] = useState(false);\n//   const [startDate, setStartDate] = useState('');\n//   const [endDate, setEndDate] = useState('');\n//   const [currentPage, setCurrentPage] = useState(1);\n//   const rowsPerPage = 10;\n//   const [error, setError] = useState('');\n//   const [search, setSearch] = useState('');\n//   const [darkMode, setDarkMode] = useState(() => {\n//     if (typeof window !== \"undefined\") {\n//       const stored = localStorage.getItem('dashboard-darkmode');\n//       if (stored) return stored === 'true';\n//       return window.matchMedia('(prefers-color-scheme: dark)').matches;\n//     }\n//     return false;\n//   });\n//   const [showFilters, setShowFilters] = useState(false);\n//   const [activeTab, setActiveTab] = useState('dashboard');\n//   const [showTransactions, setShowTransactions] = useState(false);\n\n//   const navigate = useNavigate();\n//   const COLORS = ['#8884d8', '#82ca9d', '#ffc658', '#ff7f50', '#00c49f', '#ffb6b9'];\n\n//   useEffect(() => {\n//     if (darkMode) {\n//       document.documentElement.classList.add('dark');\n//       localStorage.setItem('dashboard-darkmode', 'true');\n//     } else {\n//       document.documentElement.classList.remove('dark');\n//       localStorage.setItem('dashboard-darkmode', 'false');\n//     }\n//   }, [darkMode]);\n\n//   useEffect(() => {\n//     const fetchTransactions = async () => {\n//       try {\n//         const token = localStorage.getItem('token');\n//         const res = await axios.get('http://localhost:5000/api/transactions', {\n//           headers: { Authorization: `Bearer ${token}` },\n//         });\n//         const data = Array.isArray(res.data) ? res.data : res.data.transactions || [];\n//         setTransactions(data);\n//         setFiltered(data);\n//       } catch (err) {\n//         setError('Failed to load transactions');\n//       }\n//     };\n//     fetchTransactions();\n//   }, []);\n\n//   useEffect(() => {\n//     let result = [...transactions];\n\n//     if (month) result = result.filter((t) => new Date(t.date).getMonth() + 1 === Number(month));\n//     if (status) result = result.filter((t) => t.status === status);\n//     if (category) result = result.filter((t) => t.category === category);\n//     if (user) result = result.filter((t) => t.user_id === user);\n//     if (minAmount) result = result.filter((t) => t.amount >= parseFloat(minAmount));\n//     if (maxAmount) result = result.filter((t) => t.amount <= parseFloat(maxAmount));\n//     if (startDate) result = result.filter((t) => new Date(t.date) >= new Date(startDate));\n//     if (endDate) result = result.filter((t) => new Date(t.date) <= new Date(endDate));\n\n//     if (search.trim()) {\n//       const s = search.trim().toLowerCase();\n//       result = result.filter((t) =>\n//         t.user_id?.toLowerCase().includes(s) ||\n//         t.status?.toLowerCase().includes(s) ||\n//         t.category?.toLowerCase().includes(s) ||\n//         t.description?.toLowerCase().includes(s) ||\n//         t.amount.toString().includes(s) ||\n//         new Date(t.date).toLocaleDateString().toLowerCase().includes(s)\n//       );\n//     }\n\n//     setCurrentPage(1);\n//     setFiltered(result);\n//   }, [\n//     month, status, category, user, minAmount, maxAmount,\n//     startDate, endDate, transactions, search\n//   ]);\n\n//   const exportToCSV = () => {\n//     const header = 'User ID,Status,Date,Amount,Category,Description\\n';\n//     const rows = filtered\n//       .map((t) => {\n//         const date = new Date(t.date).toISOString().split('T')[0];\n//         return `${t.user_id},${t.status},${date},${t.amount},${t.category || 'N/A'},${t.description || '-'}`;\n//       })\n//       .join('\\n');\n//     const blob = new Blob([header + rows], { type: 'text/csv' });\n//     const url = URL.createObjectURL(blob);\n//     const a = document.createElement('a');\n//     a.href = url;\n//     a.download = 'transactions.csv';\n//     a.click();\n//     URL.revokeObjectURL(url);\n//   };\n\n//   const handleLogout = () => {\n//     localStorage.removeItem('token');\n//     navigate('/');\n//   };\n\n//   const uniqueCategories = Array.from(new Set(transactions.map((t) => t.category)));\n//   const uniqueUsers = Array.from(new Set(transactions.map((t) => t.user_id)));\n\n//   const getWeek = (dateStr: string) => {\n//     const date = new Date(dateStr);\n//     const firstDay = new Date(date.getFullYear(), date.getMonth(), 1);\n//     const dayOfWeek = firstDay.getDay();\n//     const adjustedDate = date.getDate() + dayOfWeek;\n//     return Math.ceil(adjustedDate / 7);\n//   };\n\n//   const categoryData = Object.entries(\n//     filtered.reduce((acc, t) => {\n//       const key = t.category || 'Uncategorized';\n//       acc[key] = (acc[key] || 0) + t.amount;\n//       return acc;\n//     }, {} as Record<string, number>)\n//   ).map(([name, value]) => ({ name, value }));\n\n//   const barData = groupByWeek\n//     ? Array.from({ length: 12 }, (_, i) => {\n//         const monthName = new Date(0, i).toLocaleString('default', { month: 'short' });\n//         const weeks = [0, 0, 0, 0, 0];\n//         filtered\n//           .filter((t) => new Date(t.date).getMonth() === i)\n//           .forEach((t) => {\n//             const week = getWeek(t.date);\n//             weeks[week - 1] += t.amount;\n//           });\n//         return { name: monthName, ...weeks.reduce((acc, val, idx) => ({ ...acc, [`W${idx + 1}`]: val }), {}) };\n//       })\n//     : Array.from({ length: 12 }, (_, i) => {\n//         const monthName = new Date(0, i).toLocaleString('default', { month: 'short' });\n//         const total = filtered\n//           .filter((t) => new Date(t.date).getMonth() === i)\n//           .reduce((sum, t) => sum + t.amount, 0);\n//         return { name: monthName, total };\n//       });\n\n//   // Recent transactions data for the sidebar\n//   const recentTransactions = [...transactions]\n//     .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())\n//     .slice(0, 5);\n\n//   const totalEntries = filtered.length;\n//   const totalPages = Math.ceil(totalEntries / rowsPerPage);\n//   const startIndex = (currentPage - 1) * rowsPerPage;\n//   const currentEntries = filtered.slice(startIndex, startIndex + rowsPerPage);\n\n//   // Summary metrics\n//   const totalAmount = filtered.reduce((sum, t) => sum + t.amount, 0);\n//   const totalPaid = filtered.filter(t => t.status === 'Paid').reduce((sum, t) => sum + t.amount, 0);\n//   const totalPending = filtered.filter(t => t.status === 'Pending').reduce((sum, t) => sum + t.amount, 0);\n\n//   return (\n//     <div className=\"flex min-h-screen bg-gray-100 dark:bg-gray-900 transition-colors duration-300\">\n//       {/* Sidebar - Redesigned */}\n//       <div className=\"w-64 bg-indigo-700 dark:bg-gray-800 shadow-md p-4 flex flex-col text-white\">\n//         <div className=\"flex items-center mb-8\">\n//           <div className=\"w-10 h-10 rounded-full bg-white flex items-center justify-center mr-3\">\n//             <span className=\"text-indigo-700 font-bold text-xl\">$</span>\n//           </div>\n//           <h2 className=\"text-xl font-bold\">Finance Dashboard</h2>\n//         </div>\n\n//         {/* Main Navigation */}\n//         <nav className=\"space-y-1 mb-8\">\n//           <button \n//             onClick={() => { setActiveTab('dashboard'); setShowTransactions(false); }}\n//             className={`flex items-center w-full p-3 rounded-lg ${activeTab === 'dashboard' ? 'bg-indigo-800 dark:bg-gray-700' : 'hover:bg-indigo-600 dark:hover:bg-gray-700'}`}\n//           >\n//             <span className=\"mr-3\">üìä</span>\n//             Dashboard\n//           </button>\n\n//           <button \n//             onClick={() => { setActiveTab('transactions'); setShowTransactions(true); }}\n//             className={`flex items-center w-full p-3 rounded-lg ${activeTab === 'transactions' ? 'bg-indigo-800 dark:bg-gray-700' : 'hover:bg-indigo-600 dark:hover:bg-gray-700'}`}\n//           >\n//             <span className=\"mr-3\">üí≥</span>\n//             Transactions\n//           </button>\n\n//           <button \n//             onClick={() => setActiveTab('accounts')}\n//             className={`flex items-center w-full p-3 rounded-lg ${activeTab === 'accounts' ? 'bg-indigo-800 dark:bg-gray-700' : 'hover:bg-indigo-600 dark:hover:bg-gray-700'}`}\n//           >\n//             <span className=\"mr-3\">üè¶</span>\n//             Accounts\n//           </button>\n\n//           <button \n//             onClick={() => setActiveTab('reports')}\n//             className={`flex items-center w-full p-3 rounded-lg ${activeTab === 'reports' ? 'bg-indigo-800 dark:bg-gray-700' : 'hover:bg-indigo-600 dark:hover:bg-gray-700'}`}\n//           >\n//             <span className=\"mr-3\">üìà</span>\n//             Reports\n//           </button>\n\n//           <button \n//             onClick={() => setActiveTab('settings')}\n//             className={`flex items-center w-full p-3 rounded-lg ${activeTab === 'settings' ? 'bg-indigo-800 dark:bg-gray-700' : 'hover:bg-indigo-600 dark:hover:bg-gray-700'}`}\n//           >\n//             <span className=\"mr-3\">‚öôÔ∏è</span>\n//             Settings\n//           </button>\n//         </nav>\n\n//         {/* Recent Transactions Section */}\n//         <div className=\"mt-auto\">\n//           <h3 className=\"text-sm font-semibold uppercase tracking-wider mb-2 opacity-70\">Recent Transactions</h3>\n//           <div className=\"space-y-3\">\n//             {recentTransactions.map((t) => (\n//               <div key={t._id} className=\"flex justify-between items-center p-2 bg-indigo-600 dark:bg-gray-700 rounded-lg\">\n//                 <div>\n//                   <p className=\"text-sm font-medium\">{t.category || 'Other'}</p>\n//                   <p className=\"text-xs opacity-80\">{new Date(t.date).toLocaleDateString()}</p>\n//                 </div>\n//                 <div className={`text-sm font-bold ${t.status === 'Paid' ? 'text-green-300' : 'text-yellow-300'}`}>\n//                   ‚Çπ{t.amount}\n//                 </div>\n//               </div>\n//             ))}\n//           </div>\n//         </div>\n//       </div>\n\n//       {/* Main content */}\n//       <div className=\"flex-1 p-6\">\n//         {/* Header with search and user controls */}\n//         <div className=\"flex justify-between items-center mb-8\">\n//           <h1 className=\"text-2xl font-bold text-gray-800 dark:text-white\">\n//             {activeTab === 'dashboard' && 'Dashboard Overview'}\n//             {activeTab === 'transactions' && 'Transaction History'}\n//             {activeTab === 'accounts' && 'Accounts Management'}\n//             {activeTab === 'reports' && 'Financial Reports'}\n//             {activeTab === 'settings' && 'Settings'}\n//           </h1>\n\n//           <div className=\"flex items-center space-x-4\">\n//             <div className=\"relative\">\n//               <input\n//                 type=\"text\"\n//                 className=\"pl-10 pr-4 py-2 border border-gray-300 dark:border-gray-600 rounded-full shadow-sm dark:bg-gray-800 dark:text-white\"\n//                 placeholder=\"Search...\"\n//                 value={search}\n//                 onChange={e => setSearch(e.target.value)}\n//               />\n//               <span className=\"absolute left-3 top-2.5\">üîç</span>\n//             </div>\n\n//             <button\n//               onClick={() => setDarkMode(d => !d)}\n//               className=\"p-2 rounded-full bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600\"\n//               title=\"Toggle dark mode\"\n//             >\n//               {darkMode ? '‚òÄÔ∏è' : 'üåô'}\n//             </button>\n\n//             <div className=\"flex items-center\">\n//               <div className=\"w-8 h-8 rounded-full bg-indigo-600 flex items-center justify-center text-white mr-2\">\n//                 {user ? user.charAt(0).toUpperCase() : 'U'}\n//               </div>\n//               <button\n//                 onClick={handleLogout}\n//                 className=\"text-sm text-gray-600 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white\"\n//               >\n//                 Logout\n//               </button>\n//             </div>\n//           </div>\n//         </div>\n\n//         {/* Dashboard Content */}\n//         {activeTab === 'dashboard' && (\n//           <>\n//             {/* Summary metrics - Redesigned */}\n//             <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n//               <div className=\"bg-white dark:bg-gray-800 rounded-xl shadow p-6 flex items-center\">\n//                 <div className=\"p-3 rounded-full bg-blue-100 dark:bg-blue-900 mr-4\">\n//                   <span className=\"text-blue-600 dark:text-blue-300\">üí∞</span>\n//                 </div>\n//                 <div>\n//                   <p className=\"text-gray-500 dark:text-gray-400 text-sm\">Total Balance</p>\n//                   <p className=\"text-2xl font-bold text-gray-800 dark:text-white\">‚Çπ{totalAmount.toLocaleString()}</p>\n//                 </div>\n//               </div>\n\n//               <div className=\"bg-white dark:bg-gray-800 rounded-xl shadow p-6 flex items-center\">\n//                 <div className=\"p-3 rounded-full bg-green-100 dark:bg-green-900 mr-4\">\n//                   <span className=\"text-green-600 dark:text-green-300\">‚Üë</span>\n//                 </div>\n//                 <div>\n//                   <p className=\"text-gray-500 dark:text-gray-400 text-sm\">Income</p>\n//                   <p className=\"text-2xl font-bold text-gray-800 dark:text-white\">‚Çπ{totalPaid.toLocaleString()}</p>\n//                 </div>\n//               </div>\n\n//               <div className=\"bg-white dark:bg-gray-800 rounded-xl shadow p-6 flex items-center\">\n//                 <div className=\"p-3 rounded-full bg-red-100 dark:bg-red-900 mr-4\">\n//                   <span className=\"text-red-600 dark:text-red-300\">‚Üì</span>\n//                 </div>\n//                 <div>\n//                   <p className=\"text-gray-500 dark:text-gray-400 text-sm\">Expenses</p>\n//                   <p className=\"text-2xl font-bold text-gray-800 dark:text-white\">‚Çπ{totalPending.toLocaleString()}</p>\n//                 </div>\n//               </div>\n\n//               <div className=\"bg-white dark:bg-gray-800 rounded-xl shadow p-6 flex items-center\">\n//                 <div className=\"p-3 rounded-full bg-purple-100 dark:bg-purple-900 mr-4\">\n//                   <span className=\"text-purple-600 dark:text-purple-300\">üìä</span>\n//                 </div>\n//                 <div>\n//                   <p className=\"text-gray-500 dark:text-gray-400 text-sm\">Total Transactions</p>\n//                   <p className=\"text-2xl font-bold text-gray-800 dark:text-white\">{filtered.length}</p>\n//                 </div>\n//               </div>\n//             </div>\n\n//             {/* Charts Section */}\n//             <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\n//               {/* Spending Overview Chart */}\n//               <div className=\"bg-white dark:bg-gray-800 rounded-xl shadow p-6\">\n//                 <div className=\"flex justify-between items-center mb-4\">\n//                   <h2 className=\"text-lg font-semibold text-gray-800 dark:text-white\">Spending Overview</h2>\n//                   <select \n//                     className=\"text-sm border-none bg-gray-100 dark:bg-gray-700 rounded-lg px-3 py-1\"\n//                     value={month}\n//                     onChange={(e) => setMonth(e.target.value)}\n//                   >\n//                     <option value=\"\">All Months</option>\n//                     {Array.from({ length: 12 }, (_, i) => (\n//                       <option key={i + 1} value={i + 1}>\n//                         {new Date(0, i).toLocaleString('default', { month: 'long' })}\n//                       </option>\n//                     ))}\n//                   </select>\n//                 </div>\n//                 <div className=\"h-64\">\n//                   <ResponsiveContainer width=\"100%\" height=\"100%\">\n//                     <AreaChart data={barData}>\n//                       <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#eee\" strokeOpacity={darkMode ? 0.1 : 1} />\n//                       <XAxis dataKey=\"name\" stroke={darkMode ? '#aaa' : '#666'} />\n//                       <YAxis stroke={darkMode ? '#aaa' : '#666'} />\n//                       <Tooltip />\n//                       <Area type=\"monotone\" dataKey=\"total\" stroke=\"#8884d8\" fill=\"#8884d8\" fillOpacity={0.2} />\n//                     </AreaChart>\n//                   </ResponsiveContainer>\n//                 </div>\n//               </div>\n\n//               {/* Categories Chart */}\n//               {/* <div className=\"bg-white dark:bg-gray-800 rounded-xl shadow p-6\">\n//                 <h2 className=\"text-lg font-semibold text-gray-800 dark:text-white mb-4\">Spending by Category</h2>\n//                 <div className=\"h-64\">\n//                   <ResponsiveContainer width=\"100%\" height=\"100%\">\n//                     <PieChart>\n//                       <Pie \n//                         data={categoryData} \n//                         dataKey=\"value\" \n//                         nameKey=\"name\" \n//                         cx=\"50%\" \n//                         cy=\"50%\" \n//                         outerRadius={80} \n//                         fill=\"#8884d8\" \n//                         label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}\n//                       >\n//                         {categoryData.map((_, i) => (\n//                           <Cell key={i} fill={COLORS[i % COLORS.length]} />\n//                         ))}\n//                       </Pie>\n//                       <Tooltip formatter={(value) => [`‚Çπ${value}`, 'Amount']} />\n//                       <Legend />\n//                     </PieChart>\n//                   </ResponsiveContainer>\n//                 </div> */}\n//               {/* </div> */}\n//             </div>\n\n//             {/* Recent Transactions Table */}\n//             <div className=\"bg-white dark:bg-gray-800 rounded-xl shadow overflow-hidden\">\n//               <div className=\"p-6 flex justify-between items-center\">\n//                 <h2 className=\"text-lg font-semibold text-gray-800 dark:text-white\">Recent Transactions</h2>\n//                 <button \n//                   onClick={() => setShowTransactions(true)}\n//                   className=\"text-sm text-indigo-600 dark:text-indigo-400 hover:underline\"\n//                 >\n//                   View All\n//                 </button>\n//               </div>\n\n//               <div className=\"overflow-x-auto\">\n//                 <table className=\"w-full\">\n//                   <thead className=\"bg-gray-50 dark:bg-gray-700\">\n//                     <tr>\n//                       <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">Category</th>\n//                       <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">Description</th>\n//                       <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">Date</th>\n//                       <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">Amount</th>\n//                       <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">Status</th>\n//                     </tr>\n//                   </thead>\n//                   <tbody className=\"divide-y divide-gray-200 dark:divide-gray-700\">\n//                     {transactions.slice(0, 5).map((t) => (\n//                       <tr key={t._id} className=\"hover:bg-gray-50 dark:hover:bg-gray-700\">\n//                         <td className=\"px-6 py-4 whitespace-nowrap\">\n//                           <div className=\"flex items-center\">\n//                             <div className=\"flex-shrink-0 h-10 w-10 rounded-full bg-indigo-100 dark:bg-indigo-900 flex items-center justify-center\">\n//                               <span className=\"text-indigo-600 dark:text-indigo-300\">üí≥</span>\n//                             </div>\n//                             <div className=\"ml-4\">\n//                               <div className=\"text-sm font-medium text-gray-900 dark:text-white\">{t.category || 'Other'}</div>\n//                               <div className=\"text-sm text-gray-500 dark:text-gray-400\">{t.user_id}</div>\n//                             </div>\n//                           </div>\n//                         </td>\n//                         <td className=\"px-6 py-4 whitespace-nowrap\">\n//                           <div className=\"text-sm text-gray-900 dark:text-white\">{t.description || '-'}</div>\n//                         </td>\n//                         <td className=\"px-6 py-4 whitespace-nowrap\">\n//                           <div className=\"text-sm text-gray-900 dark:text-white\">\n//                             {new Date(t.date).toLocaleDateString()}\n//                           </div>\n//                         </td>\n//                         <td className=\"px-6 py-4 whitespace-nowrap\">\n//                           <div className=\"text-sm font-medium text-gray-900 dark:text-white\">\n//                             ‚Çπ{t.amount}\n//                           </div>\n//                         </td>\n//                         <td className=\"px-6 py-4 whitespace-nowrap\">\n//                           <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full \n//                             ${t.status === 'Paid' ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200' : \n//                               'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200'}`}>\n//                             {t.status}\n//                           </span>\n//                         </td>\n//                       </tr>\n//                     ))}\n//                   </tbody>\n//                 </table>\n//               </div>\n//             </div>\n//           </>\n//         )}\n\n//         {/* Transactions Tab Content */}\n//         {(activeTab === 'transactions' || showTransactions) && (\n//           <div className=\"bg-white dark:bg-gray-800 rounded-xl shadow overflow-hidden\">\n//             <div className=\"p-6 flex justify-between items-center\">\n//               <h2 className=\"text-lg font-semibold text-gray-800 dark:text-white\">Transaction History</h2>\n//               <div className=\"flex space-x-3\">\n//                 <button \n//                   onClick={exportToCSV}\n//                   className=\"px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 text-sm\"\n//                 >\n//                   Export CSV\n//                 </button>\n//                 <button \n//                   onClick={() => setShowFilters(!showFilters)}\n//                   className=\"px-4 py-2 bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-white rounded-lg hover:bg-gray-300 dark:hover:bg-gray-600 text-sm\"\n//                 >\n//                   {showFilters ? 'Hide Filters' : 'Show Filters'}\n//                 </button>\n//               </div>\n//             </div>\n\n//             {/* Filters Section */}\n//             {showFilters && (\n//               <div className=\"px-6 pb-4 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n//                 <select \n//                   className=\"p-2 border border-gray-300 dark:border-gray-600 rounded-lg dark:bg-gray-700 dark:text-white\"\n//                   value={status}\n//                   onChange={(e) => setStatus(e.target.value)}\n//                 >\n//                   <option value=\"\">All Status</option>\n//                   <option value=\"Paid\">Paid</option>\n//                   <option value=\"Pending\">Pending</option>\n//                 </select>\n\n//                 <select \n//                   className=\"p-2 border border-gray-300 dark:border-gray-600 rounded-lg dark:bg-gray-700 dark:text-white\"\n//                   value={category}\n//                   onChange={(e) => setCategory(e.target.value)}\n//                 >\n//                   <option value=\"\">All Categories</option>\n//                   {uniqueCategories.map((cat) => (\n//                     <option key={cat}>{cat}</option>\n//                   ))}\n//                 </select>\n\n//                 <input \n//                   type=\"number\" \n//                   className=\"p-2 border border-gray-300 dark:border-gray-600 rounded-lg dark:bg-gray-700 dark:text-white\"\n//                   placeholder=\"Min Amount\"\n//                   value={minAmount}\n//                   onChange={(e) => setMinAmount(e.target.value)}\n//                 />\n\n//                 <input \n//                   type=\"number\" \n//                   className=\"p-2 border border-gray-300 dark:border-gray-600 rounded-lg dark:bg-gray-700 dark:text-white\"\n//                   placeholder=\"Max Amount\"\n//                   value={maxAmount}\n//                   onChange={(e) => setMaxAmount(e.target.value)}\n//                 />\n//               </div>\n//             )}\n\n//             {/* Transactions Table */}\n//             <div className=\"overflow-x-auto\">\n//               <table className=\"w-full\">\n//                 <thead className=\"bg-gray-50 dark:bg-gray-700\">\n//                   <tr>\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">User</th>\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">Date</th>\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">Amount</th>\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">Category</th>\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">Description</th>\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">Status</th>\n//                   </tr>\n//                 </thead>\n//                 <tbody className=\"divide-y divide-gray-200 dark:divide-gray-700\">\n//                   {currentEntries.length === 0 ? (\n//                     <tr>\n//                       <td colSpan={6} className=\"px-6 py-4 text-center text-gray-500 dark:text-gray-400\">\n//                         No transactions found.\n//                       </td>\n//                     </tr>\n//                   ) : (\n//                     currentEntries.map((t) => (\n//                       <tr key={t._id} className=\"hover:bg-gray-50 dark:hover:bg-gray-700\">\n//                         <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white\">\n//                           {t.user_id}\n//                         </td>\n//                         <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white\">\n//                           {new Date(t.date).toLocaleDateString()}\n//                         </td>\n//                         <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-white\">\n//                           ‚Çπ{t.amount}\n//                         </td>\n//                         <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white\">\n//                           {t.category || 'N/A'}\n//                         </td>\n//                         <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white\">\n//                           {t.description || '-'}\n//                         </td>\n//                         <td className=\"px-6 py-4 whitespace-nowrap\">\n//                           <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full \n//                             ${t.status === 'Paid' ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200' : \n//                               'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200'}`}>\n//                             {t.status}\n//                           </span>\n//                         </td>\n//                       </tr>\n//                     ))\n//                   )}\n//                 </tbody>\n//               </table>\n//             </div>\n\n//             {/* Pagination */}\n//             <div className=\"px-6 py-4 flex items-center justify-between border-t border-gray-200 dark:border-gray-700\">\n//               <div className=\"flex-1 flex justify-between sm:hidden\">\n//                 <button \n//                   onClick={() => setCurrentPage(p => Math.max(1, p - 1))}\n//                   disabled={currentPage === 1}\n//                   className=\"relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50\"\n//                 >\n//                   Previous\n//                 </button>\n//                 <button \n//                   onClick={() => setCurrentPage(p => Math.min(totalPages, p + 1))}\n//                   disabled={currentPage === totalPages}\n//                   className=\"ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50\"\n//                 >\n//                   Next\n//                 </button>\n//               </div>\n//               <div className=\"hidden sm:flex-1 sm:flex sm:items-center sm:justify-between\">\n//                 <div>\n//                   <p className=\"text-sm text-gray-700 dark:text-gray-300\">\n//                     Showing <span className=\"font-medium\">{startIndex + 1}</span> to <span className=\"font-medium\">{Math.min(startIndex + rowsPerPage, totalEntries)}</span> of <span className=\"font-medium\">{totalEntries}</span> results\n//                   </p>\n//                 </div>\n//                 <div>\n//                   <nav className=\"relative z-0 inline-flex rounded-md shadow-sm -space-x-px\" aria-label=\"Pagination\">\n//                     <button\n//                       onClick={() => setCurrentPage(p => Math.max(1, p - 1))}\n//                       disabled={currentPage === 1}\n//                       className=\"relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 dark:bg-gray-700 dark:border-gray-600 dark:text-gray-300\"\n//                     >\n//                       <span className=\"sr-only\">Previous</span>\n//                       &larr;\n//                     </button>\n//                     {Array.from({ length: totalPages }, (_, i) => (\n//                       <button\n//                         key={i + 1}\n//                         onClick={() => setCurrentPage(i + 1)}\n//                         className={`relative inline-flex items-center px-4 py-2 border text-sm font-medium ${\n//                           currentPage === i + 1\n//                             ? 'z-10 bg-indigo-50 border-indigo-500 text-indigo-600 dark:bg-indigo-900 dark:border-indigo-700 dark:text-indigo-200'\n//                             : 'bg-white border-gray-300 text-gray-500 hover:bg-gray-50 dark:bg-gray-700 dark:border-gray-600 dark:text-gray-300'\n//                         }`}\n//                       >\n//                         {i + 1}\n//                       </button>\n//                     ))}\n//                     <button\n//                       onClick={() => setCurrentPage(p => Math.min(totalPages, p + 1))}\n//                       disabled={currentPage === totalPages}\n//                       className=\"relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 dark:bg-gray-700 dark:border-gray-600 dark:text-gray-300\"\n//                     >\n//                       <span className=\"sr-only\">Next</span>\n//                       &rarr;\n//                     </button>\n//                   </nav>\n//                 </div>\n//               </div>\n//             </div>\n//           </div>\n//         )}\n\n//         {/* Other Tab Content Placeholders */}\n//         {activeTab === 'accounts' && (\n//           <div className=\"bg-white dark:bg-gray-800 rounded-xl shadow p-6\">\n//             <h2 className=\"text-lg font-semibold text-gray-800 dark:text-white mb-4\">Accounts Management</h2>\n//             <p className=\"text-gray-600 dark:text-gray-300\">Your accounts management content will appear here.</p>\n//           </div>\n//         )}\n\n//         {activeTab === 'reports' && (\n//           <div className=\"bg-white dark:bg-gray-800 rounded-xl shadow p-6\">\n//             <h2 className=\"text-lg font-semibold text-gray-800 dark:text-white mb-4\">Financial Reports</h2>\n//             <p className=\"text-gray-600 dark:text-gray-300\">Your financial reports will appear here.</p>\n//           </div>\n//         )}\n\n//         {activeTab === 'settings' && (\n//           <div className=\"bg-white dark:bg-gray-800 rounded-xl shadow p-6\">\n//             <h2 className=\"text-lg font-semibold text-gray-800 dark:text-white mb-4\">Settings</h2>\n//             <p className=\"text-gray-600 dark:text-gray-300\">Your settings will appear here.</p>\n//           </div>\n//         )}\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default Dashboard;\n\n// dash board 3\n// import { useEffect, useState } from 'react';\n// import axios from 'axios';\n// import { useNavigate } from 'react-router-dom';\n// import {\n//   PieChart, Pie, Cell, Tooltip, Legend, BarChart, Bar,\n//   XAxis, YAxis, CartesianGrid, ResponsiveContainer\n// } from 'recharts';\n\n// interface Transaction {\n//   _id: string;\n//   date: string;\n//   amount: number;\n//   category: string;\n//   description?: string;\n//   user_id: string;\n//   status: 'Paid' | 'Pending';\n// }\n\n// function Dashboard() {\n//   const [transactions, setTransactions] = useState<Transaction[]>([]);\n//   const [filtered, setFiltered] = useState<Transaction[]>([]);\n//   const [month, setMonth] = useState('');\n//   const [status, setStatus] = useState('');\n//   const [category, setCategory] = useState('');\n//   const [user, setUser] = useState('');\n//   const [minAmount, setMinAmount] = useState('');\n//   const [maxAmount, setMaxAmount] = useState('');\n//   const [groupByWeek, setGroupByWeek] = useState(false);\n//   const [startDate, setStartDate] = useState('');\n//   const [endDate, setEndDate] = useState('');\n//   const [currentPage, setCurrentPage] = useState(1);\n//   const rowsPerPage = 10;\n//   const [error, setError] = useState('');\n//   const [search, setSearch] = useState('');\n//   const [darkMode, setDarkMode] = useState(() => {\n//     if (typeof window !== \"undefined\") {\n//       const stored = localStorage.getItem('dashboard-darkmode');\n//       if (stored) return stored === 'true';\n//       return window.matchMedia('(prefers-color-scheme: dark)').matches;\n//     }\n//     return false;\n//   });\n//   const [showFilters, setShowFilters] = useState(false);\n\n//   // Sidebar navigation\n//   const [activeView, setActiveView] = useState<'dashboard' | 'transactions' | 'analytics' | 'wallet' | 'messages' | 'settings'>('dashboard');\n\n//   const navigate = useNavigate();\n//   const COLORS = ['#8884d8', '#82ca9d', '#ffc658', '#ff7f50', '#00c49f', '#ffb6b9'];\n\n//   useEffect(() => {\n//     if (darkMode) {\n//       document.documentElement.classList.add('dark');\n//       localStorage.setItem('dashboard-darkmode', 'true');\n//     } else {\n//       document.documentElement.classList.remove('dark');\n//       localStorage.setItem('dashboard-darkmode', 'false');\n//     }\n//   }, [darkMode]);\n\n//   useEffect(() => {\n//     const fetchTransactions = async () => {\n//       try {\n//         const token = localStorage.getItem('token');\n//         const res = await axios.get('http://localhost:5000/api/transactions', {\n//           headers: { Authorization: `Bearer ${token}` },\n//         });\n//         const data = Array.isArray(res.data) ? res.data : res.data.transactions || [];\n//         setTransactions(data);\n//         setFiltered(data);\n//       } catch (err) {\n//         setError('Failed to load transactions');\n//       }\n//     };\n//     fetchTransactions();\n//   }, []);\n\n//   useEffect(() => {\n//     let result = [...transactions];\n\n//     if (month) result = result.filter((t) => new Date(t.date).getMonth() + 1 === Number(month));\n//     if (status) result = result.filter((t) => t.status === status);\n//     if (category) result = result.filter((t) => t.category === category);\n//     if (user) result = result.filter((t) => t.user_id === user);\n//     if (minAmount) result = result.filter((t) => t.amount >= parseFloat(minAmount));\n//     if (maxAmount) result = result.filter((t) => t.amount <= parseFloat(maxAmount));\n//     if (startDate) result = result.filter((t) => new Date(t.date) >= new Date(startDate));\n//     if (endDate) result = result.filter((t) => new Date(t.date) <= new Date(endDate));\n\n//     if (search.trim()) {\n//       const s = search.trim().toLowerCase();\n//       result = result.filter((t) =>\n//         t.user_id?.toLowerCase().includes(s) ||\n//         t.status?.toLowerCase().includes(s) ||\n//         t.category?.toLowerCase().includes(s) ||\n//         t.description?.toLowerCase().includes(s) ||\n//         t.amount.toString().includes(s) ||\n//         new Date(t.date).toLocaleDateString().toLowerCase().includes(s)\n//       );\n//     }\n\n//     setCurrentPage(1);\n//     setFiltered(result);\n//   }, [\n//     month, status, category, user, minAmount, maxAmount,\n//     startDate, endDate, transactions, search\n//   ]);\n\n//   const exportToCSV = () => {\n//     const header = 'User ID,Status,Date,Amount,Category,Description\\n';\n//     const rows = filtered\n//       .map((t) => {\n//         const date = new Date(t.date).toISOString().split('T')[0];\n//         return `${t.user_id},${t.status},${date},${t.amount},${t.category || 'N/A'},${t.description || '-'}`;\n//       })\n//       .join('\\n');\n//     const blob = new Blob([header + rows], { type: 'text/csv' });\n//     const url = URL.createObjectURL(blob);\n//     const a = document.createElement('a');\n//     a.href = url;\n//     a.download = 'transactions.csv';\n//     a.click();\n//     URL.revokeObjectURL(url);\n//   };\n\n//   const handleLogout = () => {\n//     localStorage.removeItem('token');\n//     navigate('/');\n//   };\n\n//   const uniqueCategories = Array.from(new Set(transactions.map((t) => t.category)));\n//   const uniqueUsers = Array.from(new Set(transactions.map((t) => t.user_id)));\n\n//   const getWeek = (dateStr: string) => {\n//     const date = new Date(dateStr);\n//     const firstDay = new Date(date.getFullYear(), date.getMonth(), 1);\n//     const dayOfWeek = firstDay.getDay();\n//     const adjustedDate = date.getDate() + dayOfWeek;\n//     return Math.ceil(adjustedDate / 7);\n//   };\n\n//   const categoryData = Object.entries(\n//     filtered.reduce((acc, t) => {\n//       const key = t.category || 'Uncategorized';\n//       acc[key] = (acc[key] || 0) + t.amount;\n//       return acc;\n//     }, {} as Record<string, number>)\n//   ).map(([name, value]) => ({ name, value }));\n\n//   const barData = groupByWeek\n//     ? Array.from({ length: 12 }, (_, i) => {\n//         const monthName = new Date(0, i).toLocaleString('default', { month: 'short' });\n//         const weeks = [0, 0, 0, 0, 0];\n//         filtered\n//           .filter((t) => new Date(t.date).getMonth() === i)\n//           .forEach((t) => {\n//             const week = getWeek(t.date);\n//             weeks[week - 1] += t.amount;\n//           });\n//         return { name: monthName, ...weeks.reduce((acc, val, idx) => ({ ...acc, [`W${idx + 1}`]: val }), {}) };\n//       })\n//     : Array.from({ length: 12 }, (_, i) => {\n//         const monthName = new Date(0, i).toLocaleString('default', { month: 'short' });\n//         const total = filtered\n//           .filter((t) => new Date(t.date).getMonth() === i)\n//           .reduce((sum, t) => sum + t.amount, 0);\n//         return { name: monthName, total };\n//       });\n\n//   const totalEntries = filtered.length;\n//   const totalPages = Math.ceil(totalEntries / rowsPerPage);\n//   const startIndex = (currentPage - 1) * rowsPerPage;\n//   const currentEntries = filtered.slice(startIndex, startIndex + rowsPerPage);\n\n//   // Summary metrics\n//   const totalAmount = filtered.reduce((sum, t) => sum + t.amount, 0);\n//   const totalPaid = filtered.filter(t => t.status === 'Paid').reduce((sum, t) => sum + t.amount, 0);\n//   const totalPending = filtered.filter(t => t.status === 'Pending').reduce((sum, t) => sum + t.amount, 0);\n\n//   return (\n//     <div className=\"flex min-h-screen bg-gray-100 dark:bg-gray-900 transition-colors duration-300\">\n//       {/* Sidebar */}\n//       <div className=\"w-64 bg-white dark:bg-gray-800 shadow-md p-4 flex flex-col\">\n//         <h2 className=\"text-xl font-bold mb-6 text-blue-600 dark:text-blue-300\">Looper.ai</h2>\n//         {/* Sidebar Menu Items */}\n//         <nav className=\"flex-1 space-y-2 mb-6\">\n//           <button\n//             onClick={() => setActiveView('dashboard')}\n//             className={`flex items-center w-full p-2 rounded hover:bg-blue-100 dark:hover:bg-gray-700 text-gray-700 dark:text-gray-200 ${activeView === 'dashboard' ? 'bg-blue-50 dark:bg-gray-700' : ''}`}>\n//             <span className=\"mr-3\">üìä</span>\n//             <span>Dashboard</span>\n//           </button>\n//           <button\n//             onClick={() => setActiveView('transactions')}\n//             className={`flex items-center w-full p-2 rounded hover:bg-blue-100 dark:hover:bg-gray-700 text-gray-700 dark:text-gray-200 ${activeView === 'transactions' ? 'bg-blue-50 dark:bg-gray-700' : ''}`}>\n//             <span className=\"mr-3\">üí∞</span>\n//             <span>Transactions</span>\n//           </button>\n//           <button\n//             onClick={() => setActiveView('analytics')}\n//             className={`flex items-center w-full p-2 rounded hover:bg-blue-100 dark:hover:bg-gray-700 text-gray-700 dark:text-gray-200 ${activeView === 'analytics' ? 'bg-blue-50 dark:bg-gray-700' : ''}`}>\n//             <span className=\"mr-3\">üìà</span>\n//             <span>Analytics</span>\n//           </button>\n//           <button\n//             onClick={() => setActiveView('wallet')}\n//             className={`flex items-center w-full p-2 rounded hover:bg-blue-100 dark:hover:bg-gray-700 text-gray-700 dark:text-gray-200 ${activeView === 'wallet' ? 'bg-blue-50 dark:bg-gray-700' : ''}`}>\n//             <span className=\"mr-3\">üëõ</span>\n//             <span>Wallet</span>\n//           </button>\n//           <button\n//             onClick={() => setActiveView('messages')}\n//             className={`flex items-center w-full p-2 rounded hover:bg-blue-100 dark:hover:bg-gray-700 text-gray-700 dark:text-gray-200 ${activeView === 'messages' ? 'bg-blue-50 dark:bg-gray-700' : ''}`}>\n//             <span className=\"mr-3\">üí¨</span>\n//             <span>Messages</span>\n//           </button>\n//           <button\n//             onClick={() => setActiveView('settings')}\n//             className={`flex items-center w-full p-2 rounded hover:bg-blue-100 dark:hover:bg-gray-700 text-gray-700 dark:text-gray-200 ${activeView === 'settings' ? 'bg-blue-50 dark:bg-gray-700' : ''}`}>\n//             <span className=\"mr-3\">‚öôÔ∏è</span>\n//             <span>Settings</span>\n//           </button>\n//         </nav>\n\n//         {/* Filter toggle button */}\n//         <button\n//           onClick={() => setShowFilters(!showFilters)}\n//           className=\"flex items-center justify-between w-full p-2 mb-2 rounded hover:bg-gray-100 dark:hover:bg-gray-700\"\n//         >\n//           <span className=\"font-medium\">Filters</span>\n//           <span>{showFilters ? '‚ñ≤' : '‚ñº'}</span>\n//         </button>\n\n//         {/* Filters section - conditionally rendered */}\n//         {showFilters && (\n//           <div className=\"space-y-4 mb-4\">\n//             <select className=\"w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600 dark:text-gray-100\" value={month} onChange={(e) => setMonth(e.target.value)}>\n//               <option value=\"\">All Months</option>\n//               {Array.from({ length: 12 }, (_, i) => (\n//                 <option key={i + 1} value={i + 1}>\n//                   {new Date(0, i).toLocaleString('default', { month: 'long' })}\n//                 </option>\n//               ))}\n//             </select>\n\n//             <select className=\"w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600 dark:text-gray-100\" value={status} onChange={(e) => setStatus(e.target.value)}>\n//               <option value=\"\">All Status</option>\n//               <option value=\"Paid\">Paid</option>\n//               <option value=\"Pending\">Pending</option>\n//             </select>\n\n//             <select className=\"w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600 dark:text-gray-100\" value={category} onChange={(e) => setCategory(e.target.value)}>\n//               <option value=\"\">All Categories</option>\n//               {uniqueCategories.map((cat) => (\n//                 <option key={cat}>{cat}</option>\n//               ))}\n//             </select>\n\n//             <select className=\"w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600 dark:text-gray-100\" value={user} onChange={(e) => setUser(e.target.value)}>\n//               <option value=\"\">All Users</option>\n//               {uniqueUsers.map((u) => (\n//                 <option key={u}>{u}</option>\n//               ))}\n//             </select>\n\n//             <input type=\"number\" className=\"w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600 dark:text-gray-100\" placeholder=\"Min ‚Çπ\" value={minAmount} onChange={(e) => setMinAmount(e.target.value)} />\n//             <input type=\"number\" className=\"w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600 dark:text-gray-100\" placeholder=\"Max ‚Çπ\" value={maxAmount} onChange={(e) => setMaxAmount(e.target.value)} />\n\n//             <input type=\"date\" className=\"w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600 dark:text-gray-100\" value={startDate} onChange={(e) => setStartDate(e.target.value)} />\n//             <input type=\"date\" className=\"w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600 dark:text-gray-100\" value={endDate} onChange={(e) => setEndDate(e.target.value)} />\n\n//             <div className=\"flex space-x-2\">\n//               <button onClick={exportToCSV} className=\"flex-1 bg-green-600 text-white px-2 py-1 rounded hover:bg-green-700 text-sm\">Export CSV</button>\n//               <button onClick={() => {\n//                 setMonth(''); setStatus(''); setCategory(''); setUser('');\n//                 setMinAmount(''); setMaxAmount(''); setStartDate('');\n//                 setEndDate(''); setGroupByWeek(false); setCurrentPage(1);\n//                 setFiltered(transactions);\n//                 setSearch('');\n//               }} className=\"flex-1 bg-gray-500 text-white px-2 py-1 rounded hover:bg-gray-600 text-sm\">Reset</button>\n//             </div>\n//           </div>\n//         )}\n//       </div>\n\n//       {/* Main content */}\n//       <div className=\"flex-1 p-6\">\n//         {/* Header with search and dark mode toggle */}\n//         <div className=\"flex justify-between items-center mb-6\">\n//           <h1 className=\"text-3xl font-bold text-blue-600 dark:text-blue-300\">\n//             {activeView === 'dashboard' ? 'Dashboard' :\n//               activeView === 'transactions' ? 'Transactions' :\n//                 activeView.charAt(0).toUpperCase() + activeView.slice(1)}\n//           </h1>\n//           <div className=\"flex gap-3 items-center\">\n//             <input\n//               type=\"text\"\n//               className=\"p-2 border border-gray-300 dark:border-gray-700 rounded shadow-sm dark:bg-gray-800 dark:text-gray-100\"\n//               placeholder=\"üîç Search transactions...\"\n//               value={search}\n//               onChange={e => setSearch(e.target.value)}\n//             />\n//             <button\n//               onClick={() => setDarkMode(d => !d)}\n//               className=\"rounded px-3 py-2 text-xl focus:outline-none bg-gray-200 dark:bg-gray-700 dark:text-yellow-300 text-gray-800 hover:bg-gray-300 dark:hover:bg-gray-600 transition\"\n//               title=\"Toggle dark mode\"\n//             >\n//               {darkMode ? '‚òÄÔ∏è' : 'üåô'}\n//             </button>\n//             <button\n//               onClick={handleLogout}\n//               className=\"bg-red-600 text-white px-4 py-2 rounded hover:bg-red-700\"\n//             >\n//               Logout\n//             </button>\n//           </div>\n//         </div>\n\n//         {/* DASHBOARD VIEW */}\n//         {activeView === 'dashboard' && (\n//           <>\n//             {/* Summary metrics */}\n//             <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-8\">\n//               <div className=\"bg-white dark:bg-gray-800 rounded shadow p-4 flex flex-col items-center\">\n//                 <span className=\"text-gray-500 dark:text-gray-400 text-sm\">Total Transactions</span>\n//                 <span className=\"text-2xl font-bold text-blue-700 dark:text-blue-300\">{filtered.length}</span>\n//               </div>\n//               <div className=\"bg-white dark:bg-gray-800 rounded shadow p-4 flex flex-col items-center\">\n//                 <span className=\"text-gray-500 dark:text-gray-400 text-sm\">Total Amount</span>\n//                 <span className=\"text-2xl font-bold text-green-700 dark:text-green-400\">‚Çπ{totalAmount.toLocaleString()}</span>\n//               </div>\n//               <div className=\"bg-white dark:bg-gray-800 rounded shadow p-4 flex flex-col items-center\">\n//                 <span className=\"text-gray-500 dark:text-gray-400 text-sm\">Paid Amount</span>\n//                 <span className=\"text-2xl font-bold text-green-600 dark:text-green-300\">‚Çπ{totalPaid.toLocaleString()}</span>\n//               </div>\n//               <div className=\"bg-white dark:bg-gray-800 rounded shadow p-4 flex flex-col items-center\">\n//                 <span className=\"text-gray-500 dark:text-gray-400 text-sm\">Pending Amount</span>\n//                 <span className=\"text-2xl font-bold text-yellow-600 dark:text-yellow-400\">‚Çπ{totalPending.toLocaleString()}</span>\n//               </div>\n//             </div>\n\n//             {error && <p className=\"text-red-500 mb-4\">{error}</p>}\n\n//             {/* Charts */}\n//             <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8\">\n//               <div className=\"bg-white dark:bg-gray-800 rounded shadow p-4\">\n//                 <h2 className=\"text-xl font-semibold mb-4 text-blue-600 dark:text-blue-300\">üìà Spending by Category</h2>\n//                 <ResponsiveContainer width=\"100%\" height={300}>\n//                   <PieChart>\n//                     <Pie data={categoryData} dataKey=\"value\" nameKey=\"name\" cx=\"50%\" cy=\"50%\" outerRadius={100} fill=\"#8884d8\" label>\n//                       {categoryData.map((_, i) => <Cell key={i} fill={COLORS[i % COLORS.length]} />)}\n//                     </Pie>\n//                     <Tooltip />\n//                     <Legend />\n//                   </PieChart>\n//                 </ResponsiveContainer>\n//               </div>\n//               <div className=\"bg-white dark:bg-gray-800 rounded shadow p-4\">\n//                 <h2 className=\"text-xl font-semibold mb-4 text-green-600 dark:text-green-300\">üìä Monthly Spending</h2>\n//                 <ResponsiveContainer width=\"100%\" height={300}>\n//                   <BarChart data={barData}>\n//                     <CartesianGrid strokeDasharray=\"3 3\" />\n//                     <XAxis dataKey=\"name\" stroke={darkMode ? '#ddd' : '#333'} />\n//                     <YAxis stroke={darkMode ? '#ddd' : '#333'} />\n//                     <Tooltip />\n//                     <Legend />\n//                     {groupByWeek\n//                       ? ['W1', 'W2', 'W3', 'W4', 'W5'].map((w, i) => <Bar key={w} dataKey={w} fill={COLORS[i % COLORS.length]} />)\n//                       : <Bar dataKey=\"total\" fill=\"#82ca9d\" />}\n//                   </BarChart>\n//                 </ResponsiveContainer>\n//               </div>\n//             </div>\n\n//             {/* Group by week toggle */}\n//             <div className=\"flex justify-between items-center mb-4\">\n//               <label className=\"flex items-center gap-2 text-sm dark:text-gray-300\">\n//                 <input type=\"checkbox\" checked={groupByWeek} onChange={(e) => setGroupByWeek(e.target.checked)} />\n//                 Group by Week\n//               </label>\n//               <div className=\"text-sm text-gray-600 dark:text-gray-300\">\n//                 Showing {startIndex + 1}‚Äì{Math.min(startIndex + rowsPerPage, totalEntries)} of {totalEntries} entries\n//               </div>\n//             </div>\n//           </>\n//         )}\n\n//         {/* TRANSACTIONS VIEW */}\n//         {activeView === 'transactions' && (\n//           <div className=\"bg-white dark:bg-gray-800 rounded shadow overflow-hidden\">\n//             <table className=\"min-w-full divide-y divide-gray-200 dark:divide-gray-700\">\n//               <thead className=\"bg-gray-50 dark:bg-gray-900\">\n//                 <tr>\n//                   <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">Date</th>\n//                   <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">Amount</th>\n//                   <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">Category</th>\n//                   <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">Description</th>\n//                   <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">Status</th>\n//                 </tr>\n//               </thead>\n//               <tbody className=\"bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700\">\n//                 {currentEntries.map((transaction) => (\n//                   <tr key={transaction._id} className=\"hover:bg-gray-50 dark:hover:bg-gray-700\">\n//                     <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-200\">\n//                       {new Date(transaction.date).toLocaleDateString()}\n//                     </td>\n//                     <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-200\">\n//                       ‚Çπ{transaction.amount.toLocaleString()}\n//                     </td>\n//                     <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-200\">\n//                       {transaction.category}\n//                     </td>\n//                     <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-200\">\n//                       {transaction.description || '-'}\n//                     </td>\n//                     <td className=\"px-6 py-4 whitespace-nowrap text-sm\">\n//                       <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${\n//                         transaction.status === 'Paid'\n//                           ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200'\n//                           : 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200'\n//                       }`}>\n//                         {transaction.status}\n//                       </span>\n//                     </td>\n//                   </tr>\n//                 ))}\n//               </tbody>\n//             </table>\n\n//             {/* Pagination */}\n//             <div className=\"px-4 py-3 flex items-center justify-between border-t border-gray-200 dark:border-gray-700 sm:px-6\">\n//               <div className=\"flex-1 flex justify-between sm:hidden\">\n//                 <button onClick={() => setCurrentPage(p => Math.max(1, p - 1))} disabled={currentPage === 1} className=\"relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50\">\n//                   Previous\n//                 </button>\n//                 <button onClick={() => setCurrentPage(p => Math.min(totalPages, p + 1))} disabled={currentPage === totalPages} className=\"ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50\">\n//                   Next\n//                 </button>\n//               </div>\n//               <div className=\"hidden sm:flex-1 sm:flex sm:items-center sm:justify-between\">\n//                 <div>\n//                   <p className=\"text-sm text-gray-700 dark:text-gray-300\">\n//                     Showing <span className=\"font-medium\">{startIndex + 1}</span> to <span className=\"font-medium\">{Math.min(startIndex + rowsPerPage, totalEntries)}</span> of{' '}\n//                     <span className=\"font-medium\">{totalEntries}</span> results\n//                   </p>\n//                 </div>\n//                 <div>\n//                   <nav className=\"relative z-0 inline-flex rounded-md shadow-sm -space-x-px\" aria-label=\"Pagination\">\n//                     <button onClick={() => setCurrentPage(p => Math.max(1, p - 1))} disabled={currentPage === 1} className=\"relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 text-sm font-medium text-gray-500 dark:text-gray-400 hover:bg-gray-50 dark:hover:bg-gray-700\">\n//                       Previous\n//                     </button>\n//                     {Array.from({ length: totalPages }, (_, i) => i + 1).map(page => (\n//                       <button key={page} onClick={() => setCurrentPage(page)} className={`relative inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 text-sm font-medium ${currentPage === page ? 'text-blue-600 dark:text-blue-400' : 'text-gray-700 dark:text-gray-300'} hover:bg-gray-50 dark:hover:bg-gray-700`}>\n//                         {page}\n//                       </button>\n//                     ))}\n//                     <button onClick={() => setCurrentPage(p => Math.min(totalPages, p + 1))} disabled={currentPage === totalPages} className=\"relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 text-sm font-medium text-gray-500 dark:text-gray-400 hover:bg-gray-50 dark:hover:bg-gray-700\">\n//                       Next\n//                     </button>\n//                   </nav>\n//                 </div>\n//               </div>\n//             </div>\n//           </div>\n//         )}\n\n//         {/* ANALYTICS VIEW */}\n//         {activeView === 'analytics' && (\n//           <div className=\"text-center py-10 text-gray-600 dark:text-gray-300\">\n//             <h2 className=\"text-2xl font-semibold mb-2\">Analytics</h2>\n//             <p>Analytics content will appear here.</p>\n//           </div>\n//         )}\n\n//         {/* WALLET VIEW */}\n//         {activeView === 'wallet' && (\n//           <div className=\"text-center py-10 text-gray-600 dark:text-gray-300\">\n//             <h2 className=\"text-2xl font-semibold mb-2\">Wallet</h2>\n//             <p>Wallet content will appear here.</p>\n//           </div>\n//         )}\n\n//         {/* MESSAGES VIEW */}\n//         {activeView === 'messages' && (\n//           <div className=\"text-center py-10 text-gray-600 dark:text-gray-300\">\n//             <h2 className=\"text-2xl font-semibold mb-2\">Messages</h2>\n//             <p>Messages content will appear here.</p>\n//           </div>\n//         )}\n\n//         {/* SETTINGS VIEW */}\n//         {activeView === 'settings' && (\n//           <div className=\"text-center py-10 text-gray-600 dark:text-gray-300\">\n//             <h2 className=\"text-2xl font-semibold mb-2\">Settings</h2>\n//             <p>Settings content will appear here.</p>\n//           </div>\n//         )}\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default Dashboard;","map":{"version":3,"names":[],"sources":["C:/Users/Asus/looper-frontend/src/pages/Dashboard.tsx"],"sourcesContent":["// das\r\n\r\n// import { useEffect, useState } from 'react';\r\n// import axios from 'axios';\r\n// import { useNavigate } from 'react-router-dom';\r\n// import {\r\n//   PieChart, Pie, Cell, Tooltip, Legend, BarChart, Bar,\r\n//   XAxis, YAxis, CartesianGrid, ResponsiveContainer\r\n// } from 'recharts';\r\n\r\n// interface Transaction {\r\n//   _id: string;\r\n//   date: string;\r\n//   amount: number;\r\n//   category: string;\r\n//   description?: string;\r\n//   user_id: string;\r\n//   status: 'Paid' | 'Pending';\r\n// }\r\n\r\n// function Dashboard() {\r\n//   const [transactions, setTransactions] = useState<Transaction[]>([]);\r\n//   const [filtered, setFiltered] = useState<Transaction[]>([]);\r\n//   const [month, setMonth] = useState('');\r\n//   const [status, setStatus] = useState('');\r\n//   const [category, setCategory] = useState('');\r\n//   const [user, setUser] = useState('');\r\n//   const [minAmount, setMinAmount] = useState('');\r\n//   const [maxAmount, setMaxAmount] = useState('');\r\n//   const [groupByWeek, setGroupByWeek] = useState(false);\r\n//   const [startDate, setStartDate] = useState('');\r\n//   const [endDate, setEndDate] = useState('');\r\n//   const [currentPage, setCurrentPage] = useState(1);\r\n//   const rowsPerPage = 10;\r\n//   const [error, setError] = useState('');\r\n//   const [search, setSearch] = useState('');\r\n//   const [darkMode, setDarkMode] = useState(() => {\r\n//     // On first load, check localStorage or system preference\r\n//     if (typeof window !== \"undefined\") {\r\n//       const stored = localStorage.getItem('dashboard-darkmode');\r\n//       if (stored) return stored === 'true';\r\n//       return window.matchMedia('(prefers-color-scheme: dark)').matches;\r\n//     }\r\n//     return false;\r\n//   });\r\n\r\n//   const navigate = useNavigate();\r\n//   const COLORS = ['#8884d8', '#82ca9d', '#ffc658', '#ff7f50', '#00c49f', '#ffb6b9'];\r\n\r\n//   // Apply dark mode class to <html>\r\n//   useEffect(() => {\r\n//     if (darkMode) {\r\n//       document.documentElement.classList.add('dark');\r\n//       localStorage.setItem('dashboard-darkmode', 'true');\r\n//     } else {\r\n//       document.documentElement.classList.remove('dark');\r\n//       localStorage.setItem('dashboard-darkmode', 'false');\r\n//     }\r\n//   }, [darkMode]);\r\n\r\n//   useEffect(() => {\r\n//     const fetchTransactions = async () => {\r\n//       try {\r\n//         const token = localStorage.getItem('token');\r\n//         const res = await axios.get('http://localhost:5000/api/transactions', {\r\n//           headers: { Authorization: `Bearer ${token}` },\r\n//         });\r\n//         const data = Array.isArray(res.data) ? res.data : res.data.transactions || [];\r\n//         setTransactions(data);\r\n//         setFiltered(data);\r\n//       } catch (err) {\r\n//         setError('Failed to load transactions');\r\n//       }\r\n//     };\r\n//     fetchTransactions();\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     let result = [...transactions];\r\n\r\n//     if (month) result = result.filter((t) => new Date(t.date).getMonth() + 1 === Number(month));\r\n//     if (status) result = result.filter((t) => t.status === status);\r\n//     if (category) result = result.filter((t) => t.category === category);\r\n//     if (user) result = result.filter((t) => t.user_id === user);\r\n//     if (minAmount) result = result.filter((t) => t.amount >= parseFloat(minAmount));\r\n//     if (maxAmount) result = result.filter((t) => t.amount <= parseFloat(maxAmount));\r\n//     if (startDate) result = result.filter((t) => new Date(t.date) >= new Date(startDate));\r\n//     if (endDate) result = result.filter((t) => new Date(t.date) <= new Date(endDate));\r\n\r\n//     // Real-time search filter\r\n//     if (search.trim()) {\r\n//       const s = search.trim().toLowerCase();\r\n//       result = result.filter((t) =>\r\n//         t.user_id?.toLowerCase().includes(s) ||\r\n//         t.status?.toLowerCase().includes(s) ||\r\n//         t.category?.toLowerCase().includes(s) ||\r\n//         t.description?.toLowerCase().includes(s) ||\r\n//         t.amount.toString().includes(s) ||\r\n//         new Date(t.date).toLocaleDateString().toLowerCase().includes(s)\r\n//       );\r\n//     }\r\n\r\n//     setCurrentPage(1);\r\n//     setFiltered(result);\r\n//   }, [\r\n//     month, status, category, user, minAmount, maxAmount,\r\n//     startDate, endDate, transactions, search\r\n//   ]);\r\n\r\n//   const exportToCSV = () => {\r\n//     const header = 'User ID,Status,Date,Amount,Category,Description\\n';\r\n//     const rows = filtered\r\n//       .map((t) => {\r\n//         const date = new Date(t.date).toISOString().split('T')[0];\r\n//         return `${t.user_id},${t.status},${date},${t.amount},${t.category || 'N/A'},${t.description || '-'}`;\r\n//       })\r\n//       .join('\\n');\r\n//     const blob = new Blob([header + rows], { type: 'text/csv' });\r\n//     const url = URL.createObjectURL(blob);\r\n//     const a = document.createElement('a');\r\n//     a.href = url;\r\n//     a.download = 'transactions.csv';\r\n//     a.click();\r\n//     URL.revokeObjectURL(url);\r\n//   };\r\n\r\n//   const handleLogout = () => {\r\n//     localStorage.removeItem('token');\r\n//     navigate('/');\r\n//   };\r\n\r\n//   const uniqueCategories = Array.from(new Set(transactions.map((t) => t.category)));\r\n//   const uniqueUsers = Array.from(new Set(transactions.map((t) => t.user_id)));\r\n\r\n//   const getWeek = (dateStr: string) => {\r\n//     const date = new Date(dateStr);\r\n//     const firstDay = new Date(date.getFullYear(), date.getMonth(), 1);\r\n//     const dayOfWeek = firstDay.getDay();\r\n//     const adjustedDate = date.getDate() + dayOfWeek;\r\n//     return Math.ceil(adjustedDate / 7);\r\n//   };\r\n\r\n//   const categoryData = Object.entries(\r\n//     filtered.reduce((acc, t) => {\r\n//       const key = t.category || 'Uncategorized';\r\n//       acc[key] = (acc[key] || 0) + t.amount;\r\n//       return acc;\r\n//     }, {} as Record<string, number>)\r\n//   ).map(([name, value]) => ({ name, value }));\r\n\r\n//   const barData = groupByWeek\r\n//     ? Array.from({ length: 12 }, (_, i) => {\r\n//         const monthName = new Date(0, i).toLocaleString('default', { month: 'short' });\r\n//         const weeks = [0, 0, 0, 0, 0];\r\n//         filtered\r\n//           .filter((t) => new Date(t.date).getMonth() === i)\r\n//           .forEach((t) => {\r\n//             const week = getWeek(t.date);\r\n//             weeks[week - 1] += t.amount;\r\n//           });\r\n//         return { name: monthName, ...weeks.reduce((acc, val, idx) => ({ ...acc, [`W${idx + 1}`]: val }), {}) };\r\n//       })\r\n//     : Array.from({ length: 12 }, (_, i) => {\r\n//         const monthName = new Date(0, i).toLocaleString('default', { month: 'short' });\r\n//         const total = filtered\r\n//           .filter((t) => new Date(t.date).getMonth() === i)\r\n//           .reduce((sum, t) => sum + t.amount, 0);\r\n//         return { name: monthName, total };\r\n//       });\r\n\r\n//   const totalEntries = filtered.length;\r\n//   const totalPages = Math.ceil(totalEntries / rowsPerPage);\r\n//   const startIndex = (currentPage - 1) * rowsPerPage;\r\n//   const currentEntries = filtered.slice(startIndex, startIndex + rowsPerPage);\r\n\r\n//   // --- SUMMARY METRICS LOGIC ---\r\n//   const totalAmount = filtered.reduce((sum, t) => sum + t.amount, 0);\r\n//   const totalPaid = filtered.filter(t => t.status === 'Paid').reduce((sum, t) => sum + t.amount, 0);\r\n//   const totalPending = filtered.filter(t => t.status === 'Pending').reduce((sum, t) => sum + t.amount, 0);\r\n\r\n//   return (\r\n//     <div className=\"p-6 min-h-screen bg-gray-100 dark:bg-gray-900 transition-colors duration-300\">\r\n//       <div className=\"flex justify-between items-center mb-6\">\r\n//         <h1 className=\"text-3xl font-bold text-blue-600 dark:text-blue-300\">üìä Dashboard</h1>\r\n//         <div className=\"flex gap-3 items-center\">\r\n//           <button\r\n//             onClick={() => setDarkMode(d => !d)}\r\n//             className=\"rounded px-3 py-2 text-xl focus:outline-none bg-gray-200 dark:bg-gray-700 dark:text-yellow-300 text-gray-800 hover:bg-gray-300 dark:hover:bg-gray-600 transition\"\r\n//             title=\"Toggle dark mode\"\r\n//           >\r\n//             {darkMode ? '‚òÄÔ∏è' : 'üåô'}\r\n//           </button>\r\n//           <button\r\n//             onClick={handleLogout}\r\n//             className=\"bg-red-600 text-white px-4 py-2 rounded hover:bg-red-700\"\r\n//           >\r\n//             Logout\r\n//           </button>\r\n//         </div>\r\n//       </div>\r\n\r\n//       {/* --- REAL-TIME SEARCH INPUT --- */}\r\n//       <div className=\"mb-4 flex\">\r\n//         <input\r\n//           type=\"text\"\r\n//           className=\"w-full md:w-1/3 p-2 border border-gray-300 dark:border-gray-700 rounded shadow-sm dark:bg-gray-800 dark:text-gray-100\"\r\n//           placeholder=\"üîç Search transactions (user, status, amount, date, category, description)...\"\r\n//           value={search}\r\n//           onChange={e => setSearch(e.target.value)}\r\n//         />\r\n//       </div>\r\n\r\n//       {/* --- SUMMARY METRICS SECTION --- */}\r\n//       <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-8\">\r\n//         <div className=\"bg-white dark:bg-gray-800 rounded shadow p-4 flex flex-col items-center\">\r\n//           <span className=\"text-gray-500 dark:text-gray-400 text-sm\">Total Transactions</span>\r\n//           <span className=\"text-2xl font-bold text-blue-700 dark:text-blue-300\">{filtered.length}</span>\r\n//         </div>\r\n//         <div className=\"bg-white dark:bg-gray-800 rounded shadow p-4 flex flex-col items-center\">\r\n//           <span className=\"text-gray-500 dark:text-gray-400 text-sm\">Total Amount</span>\r\n//           <span className=\"text-2xl font-bold text-green-700 dark:text-green-400\">‚Çπ{totalAmount.toLocaleString()}</span>\r\n//         </div>\r\n//         <div className=\"bg-white dark:bg-gray-800 rounded shadow p-4 flex flex-col items-center\">\r\n//           <span className=\"text-gray-500 dark:text-gray-400 text-sm\">Paid Amount</span>\r\n//           <span className=\"text-2xl font-bold text-green-600 dark:text-green-300\">‚Çπ{totalPaid.toLocaleString()}</span>\r\n//         </div>\r\n//         <div className=\"bg-white dark:bg-gray-800 rounded shadow p-4 flex flex-col items-center\">\r\n//           <span className=\"text-gray-500 dark:text-gray-400 text-sm\">Pending Amount</span>\r\n//           <span className=\"text-2xl font-bold text-yellow-600 dark:text-yellow-400\">‚Çπ{totalPending.toLocaleString()}</span>\r\n//         </div>\r\n//       </div>\r\n//       {/* --- END SUMMARY METRICS SECTION --- */}\r\n\r\n//       {error && <p className=\"text-red-500 mb-4\">{error}</p>}\r\n\r\n//       {/* Filters */}\r\n//       <div className=\"grid md:grid-cols-3 lg:grid-cols-6 gap-4 mb-4\">\r\n//         <select className=\"p-2 border rounded dark:bg-gray-800 dark:border-gray-700 dark:text-gray-100\" value={month} onChange={(e) => setMonth(e.target.value)}>\r\n//           <option value=\"\">All Months</option>\r\n//           {Array.from({ length: 12 }, (_, i) => (\r\n//             <option key={i + 1} value={i + 1}>\r\n//               {new Date(0, i).toLocaleString('default', { month: 'long' })}\r\n//             </option>\r\n//           ))}\r\n//         </select>\r\n//         <select className=\"p-2 border rounded dark:bg-gray-800 dark:border-gray-700 dark:text-gray-100\" value={status} onChange={(e) => setStatus(e.target.value)}>\r\n//           <option value=\"\">All Status</option>\r\n//           <option value=\"Paid\">Paid</option>\r\n//           <option value=\"Pending\">Pending</option>\r\n//         </select>\r\n//         <select className=\"p-2 border rounded dark:bg-gray-800 dark:border-gray-700 dark:text-gray-100\" value={category} onChange={(e) => setCategory(e.target.value)}>\r\n//           <option value=\"\">All Categories</option>\r\n//           {uniqueCategories.map((cat) => (\r\n//             <option key={cat}>{cat}</option>\r\n//           ))}\r\n//         </select>\r\n//         <select className=\"p-2 border rounded dark:bg-gray-800 dark:border-gray-700 dark:text-gray-100\" value={user} onChange={(e) => setUser(e.target.value)}>\r\n//           <option value=\"\">All Users</option>\r\n//           {uniqueUsers.map((u) => (\r\n//             <option key={u}>{u}</option>\r\n//           ))}\r\n//         </select>\r\n//         <input type=\"number\" className=\"p-2 border rounded dark:bg-gray-800 dark:border-gray-700 dark:text-gray-100\" placeholder=\"Min ‚Çπ\" value={minAmount} onChange={(e) => setMinAmount(e.target.value)} />\r\n//         <input type=\"number\" className=\"p-2 border rounded dark:bg-gray-800 dark:border-gray-700 dark:text-gray-100\" placeholder=\"Max ‚Çπ\" value={maxAmount} onChange={(e) => setMaxAmount(e.target.value)} />\r\n//       </div>\r\n//       <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6\">\r\n//         <input type=\"date\" className=\"p-2 border rounded dark:bg-gray-800 dark:border-gray-700 dark:text-gray-100\" value={startDate} onChange={(e) => setStartDate(e.target.value)} />\r\n//         <input type=\"date\" className=\"p-2 border rounded dark:bg-gray-800 dark:border-gray-700 dark:text-gray-100\" value={endDate} onChange={(e) => setEndDate(e.target.value)} />\r\n//         <button onClick={exportToCSV} className=\"bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700\">Export CSV</button>\r\n//         <button onClick={() => {\r\n//           setMonth(''); setStatus(''); setCategory(''); setUser('');\r\n//           setMinAmount(''); setMaxAmount(''); setStartDate('');\r\n//           setEndDate(''); setGroupByWeek(false); setCurrentPage(1);\r\n//           setFiltered(transactions);\r\n//           setSearch('');\r\n//         }} className=\"bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600\">Reset Filters</button>\r\n//       </div>\r\n\r\n//       <label className=\"flex items-center gap-2 mb-4 text-sm dark:text-gray-300\">\r\n//         <input type=\"checkbox\" checked={groupByWeek} onChange={(e) => setGroupByWeek(e.target.checked)} />\r\n//         Group by Week\r\n//       </label>\r\n\r\n//       {/* Table */}\r\n//       <div className=\"overflow-x-auto mb-2\">\r\n//         <table className=\"w-full bg-white dark:bg-gray-800 rounded shadow-md\">\r\n//           <thead className=\"bg-blue-600 dark:bg-blue-900 text-white\">\r\n//             <tr>\r\n//               <th className=\"p-3 text-left\">User ID</th>\r\n//               <th className=\"p-3 text-left\">Date</th>\r\n//               <th className=\"p-3 text-left\">Amount (‚Çπ)</th>\r\n//               <th className=\"p-3 text-left\">Category</th>\r\n//               <th className=\"p-3 text-left\">Description</th>\r\n//               <th className=\"p-3 text-left\">Status</th>\r\n//             </tr>\r\n//           </thead>\r\n//           <tbody>\r\n//             {currentEntries.length === 0 ? (\r\n//               <tr>\r\n//                 <td colSpan={6} className=\"p-4 text-center text-gray-500 dark:text-gray-400\">No transactions found.</td>\r\n//               </tr>\r\n//             ) : (\r\n//               currentEntries.map((t) => (\r\n//                 <tr key={t._id} className=\"border-t hover:bg-gray-50 dark:hover:bg-gray-700\">\r\n//                   <td className=\"p-3\">{t.user_id}</td>\r\n//                   <td className=\"p-3\">{new Date(t.date).toLocaleDateString()}</td>\r\n//                   <td className=\"p-3\">‚Çπ{t.amount}</td>\r\n//                   <td className=\"p-3\">{t.category || 'N/A'}</td>\r\n//                   <td className=\"p-3\">{t.description || '-'}</td>\r\n//                   <td className={`p-3 font-medium ${t.status === 'Paid' ? 'text-green-600 dark:text-green-400' : 'text-yellow-600 dark:text-yellow-400'}`}>{t.status}</td>\r\n//                 </tr>\r\n//               ))\r\n//             )}\r\n//           </tbody>\r\n//         </table>\r\n//       </div>\r\n\r\n//       <div className=\"text-sm text-gray-600 dark:text-gray-300 mb-2 text-center\">\r\n//         Showing {startIndex + 1}‚Äì{Math.min(startIndex + rowsPerPage, totalEntries)} of {totalEntries} entries\r\n//       </div>\r\n\r\n//       <div className=\"flex items-center justify-center gap-4 mb-10\">\r\n//         <button onClick={() => setCurrentPage((p) => Math.max(1, p - 1))} className=\"px-3 py-1 bg-gray-300 dark:bg-gray-700 rounded\">\r\n//           Prev\r\n//         </button>\r\n//         <span className=\"dark:text-gray-200\">Page</span>\r\n//         <input\r\n//           type=\"number\"\r\n//           min={1}\r\n//           max={totalPages}\r\n//           value={currentPage}\r\n//           onChange={(e) => {\r\n//             const val = parseInt(e.target.value);\r\n//             if (!isNaN(val) && val >= 1 && val <= totalPages) {\r\n//               setCurrentPage(val);\r\n//             }\r\n//           }}\r\n//           className=\"w-16 p-1 border rounded text-center dark:bg-gray-800 dark:border-gray-700 dark:text-gray-100\"\r\n//         />\r\n//         <span className=\"dark:text-gray-200\">of {totalPages}</span>\r\n//         <button onClick={() => setCurrentPage((p) => Math.min(totalPages, p + 1))} className=\"px-3 py-1 bg-gray-300 dark:bg-gray-700 rounded\">\r\n//           Next\r\n//         </button>\r\n//       </div>\r\n\r\n//       {/* Charts */}\r\n//       <h2 className=\"text-xl font-semibold mt-8 mb-4 text-blue-600 dark:text-blue-300\">üìà Spending by Category</h2>\r\n//       <ResponsiveContainer width=\"100%\" height={300}>\r\n//         <PieChart>\r\n//           <Pie data={categoryData} dataKey=\"value\" nameKey=\"name\" cx=\"50%\" cy=\"50%\" outerRadius={100} fill=\"#8884d8\" label>\r\n//             {categoryData.map((_, i) => <Cell key={i} fill={COLORS[i % COLORS.length]} />)}\r\n//           </Pie>\r\n//           <Tooltip />\r\n//           <Legend />\r\n//         </PieChart>\r\n//       </ResponsiveContainer>\r\n\r\n//       <h2 className=\"text-xl font-semibold mt-8 mb-4 text-green-600 dark:text-green-300\">üìä Monthly Spending</h2>\r\n//       <ResponsiveContainer width=\"100%\" height={300}>\r\n//         <BarChart data={barData}>\r\n//           <CartesianGrid strokeDasharray=\"3 3\" />\r\n//           <XAxis dataKey=\"name\" stroke={darkMode ? '#ddd' : '#333'} />\r\n//           <YAxis stroke={darkMode ? '#ddd' : '#333'} />\r\n//           <Tooltip />\r\n//           <Legend />\r\n//           {groupByWeek\r\n//             ? ['W1', 'W2', 'W3', 'W4', 'W5'].map((w, i) => <Bar key={w} dataKey={w} fill={COLORS[i % COLORS.length]} />)\r\n//             : <Bar dataKey=\"total\" fill=\"#82ca9d\" />}\r\n//         </BarChart>\r\n//       </ResponsiveContainer>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default Dashboard;\r\n\r\n// import { useEffect, useState } from 'react';\r\n// import axios from 'axios';\r\n// import { useNavigate } from 'react-router-dom';\r\n// import {\r\n//   PieChart, Pie, Cell, Tooltip, Legend, BarChart, Bar,\r\n//   XAxis, YAxis, CartesianGrid, ResponsiveContainer, AreaChart, Area\r\n// } from 'recharts';\r\n\r\n// interface Transaction {\r\n//   _id: string;\r\n//   date: string;\r\n//   amount: number;\r\n//   category: string;\r\n//   description?: string;\r\n//   user_id: string;\r\n//   status: 'Paid' | 'Pending';\r\n// }\r\n\r\n// function Dashboard() {\r\n//   const [transactions, setTransactions] = useState<Transaction[]>([]);\r\n//   const [filtered, setFiltered] = useState<Transaction[]>([]);\r\n//   const [month, setMonth] = useState('');\r\n//   const [status, setStatus] = useState('');\r\n//   const [category, setCategory] = useState('');\r\n//   const [user, setUser] = useState('');\r\n//   const [minAmount, setMinAmount] = useState('');\r\n//   const [maxAmount, setMaxAmount] = useState('');\r\n//   const [groupByWeek, setGroupByWeek] = useState(false);\r\n//   const [startDate, setStartDate] = useState('');\r\n//   const [endDate, setEndDate] = useState('');\r\n//   const [currentPage, setCurrentPage] = useState(1);\r\n//   const rowsPerPage = 10;\r\n//   const [error, setError] = useState('');\r\n//   const [search, setSearch] = useState('');\r\n//   const [darkMode, setDarkMode] = useState(() => {\r\n//     if (typeof window !== \"undefined\") {\r\n//       const stored = localStorage.getItem('dashboard-darkmode');\r\n//       if (stored) return stored === 'true';\r\n//       return window.matchMedia('(prefers-color-scheme: dark)').matches;\r\n//     }\r\n//     return false;\r\n//   });\r\n//   const [showFilters, setShowFilters] = useState(false);\r\n//   const [activeTab, setActiveTab] = useState('dashboard');\r\n//   const [showTransactions, setShowTransactions] = useState(false);\r\n\r\n//   const navigate = useNavigate();\r\n//   const COLORS = ['#8884d8', '#82ca9d', '#ffc658', '#ff7f50', '#00c49f', '#ffb6b9'];\r\n\r\n//   useEffect(() => {\r\n//     if (darkMode) {\r\n//       document.documentElement.classList.add('dark');\r\n//       localStorage.setItem('dashboard-darkmode', 'true');\r\n//     } else {\r\n//       document.documentElement.classList.remove('dark');\r\n//       localStorage.setItem('dashboard-darkmode', 'false');\r\n//     }\r\n//   }, [darkMode]);\r\n\r\n//   useEffect(() => {\r\n//     const fetchTransactions = async () => {\r\n//       try {\r\n//         const token = localStorage.getItem('token');\r\n//         const res = await axios.get('http://localhost:5000/api/transactions', {\r\n//           headers: { Authorization: `Bearer ${token}` },\r\n//         });\r\n//         const data = Array.isArray(res.data) ? res.data : res.data.transactions || [];\r\n//         setTransactions(data);\r\n//         setFiltered(data);\r\n//       } catch (err) {\r\n//         setError('Failed to load transactions');\r\n//       }\r\n//     };\r\n//     fetchTransactions();\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     let result = [...transactions];\r\n\r\n//     if (month) result = result.filter((t) => new Date(t.date).getMonth() + 1 === Number(month));\r\n//     if (status) result = result.filter((t) => t.status === status);\r\n//     if (category) result = result.filter((t) => t.category === category);\r\n//     if (user) result = result.filter((t) => t.user_id === user);\r\n//     if (minAmount) result = result.filter((t) => t.amount >= parseFloat(minAmount));\r\n//     if (maxAmount) result = result.filter((t) => t.amount <= parseFloat(maxAmount));\r\n//     if (startDate) result = result.filter((t) => new Date(t.date) >= new Date(startDate));\r\n//     if (endDate) result = result.filter((t) => new Date(t.date) <= new Date(endDate));\r\n\r\n//     if (search.trim()) {\r\n//       const s = search.trim().toLowerCase();\r\n//       result = result.filter((t) =>\r\n//         t.user_id?.toLowerCase().includes(s) ||\r\n//         t.status?.toLowerCase().includes(s) ||\r\n//         t.category?.toLowerCase().includes(s) ||\r\n//         t.description?.toLowerCase().includes(s) ||\r\n//         t.amount.toString().includes(s) ||\r\n//         new Date(t.date).toLocaleDateString().toLowerCase().includes(s)\r\n//       );\r\n//     }\r\n\r\n//     setCurrentPage(1);\r\n//     setFiltered(result);\r\n//   }, [\r\n//     month, status, category, user, minAmount, maxAmount,\r\n//     startDate, endDate, transactions, search\r\n//   ]);\r\n\r\n//   const exportToCSV = () => {\r\n//     const header = 'User ID,Status,Date,Amount,Category,Description\\n';\r\n//     const rows = filtered\r\n//       .map((t) => {\r\n//         const date = new Date(t.date).toISOString().split('T')[0];\r\n//         return `${t.user_id},${t.status},${date},${t.amount},${t.category || 'N/A'},${t.description || '-'}`;\r\n//       })\r\n//       .join('\\n');\r\n//     const blob = new Blob([header + rows], { type: 'text/csv' });\r\n//     const url = URL.createObjectURL(blob);\r\n//     const a = document.createElement('a');\r\n//     a.href = url;\r\n//     a.download = 'transactions.csv';\r\n//     a.click();\r\n//     URL.revokeObjectURL(url);\r\n//   };\r\n\r\n//   const handleLogout = () => {\r\n//     localStorage.removeItem('token');\r\n//     navigate('/');\r\n//   };\r\n\r\n//   const uniqueCategories = Array.from(new Set(transactions.map((t) => t.category)));\r\n//   const uniqueUsers = Array.from(new Set(transactions.map((t) => t.user_id)));\r\n\r\n//   const getWeek = (dateStr: string) => {\r\n//     const date = new Date(dateStr);\r\n//     const firstDay = new Date(date.getFullYear(), date.getMonth(), 1);\r\n//     const dayOfWeek = firstDay.getDay();\r\n//     const adjustedDate = date.getDate() + dayOfWeek;\r\n//     return Math.ceil(adjustedDate / 7);\r\n//   };\r\n\r\n//   const categoryData = Object.entries(\r\n//     filtered.reduce((acc, t) => {\r\n//       const key = t.category || 'Uncategorized';\r\n//       acc[key] = (acc[key] || 0) + t.amount;\r\n//       return acc;\r\n//     }, {} as Record<string, number>)\r\n//   ).map(([name, value]) => ({ name, value }));\r\n\r\n//   const barData = groupByWeek\r\n//     ? Array.from({ length: 12 }, (_, i) => {\r\n//         const monthName = new Date(0, i).toLocaleString('default', { month: 'short' });\r\n//         const weeks = [0, 0, 0, 0, 0];\r\n//         filtered\r\n//           .filter((t) => new Date(t.date).getMonth() === i)\r\n//           .forEach((t) => {\r\n//             const week = getWeek(t.date);\r\n//             weeks[week - 1] += t.amount;\r\n//           });\r\n//         return { name: monthName, ...weeks.reduce((acc, val, idx) => ({ ...acc, [`W${idx + 1}`]: val }), {}) };\r\n//       })\r\n//     : Array.from({ length: 12 }, (_, i) => {\r\n//         const monthName = new Date(0, i).toLocaleString('default', { month: 'short' });\r\n//         const total = filtered\r\n//           .filter((t) => new Date(t.date).getMonth() === i)\r\n//           .reduce((sum, t) => sum + t.amount, 0);\r\n//         return { name: monthName, total };\r\n//       });\r\n\r\n//   // Recent transactions data for the sidebar\r\n//   const recentTransactions = [...transactions]\r\n//     .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())\r\n//     .slice(0, 5);\r\n\r\n//   const totalEntries = filtered.length;\r\n//   const totalPages = Math.ceil(totalEntries / rowsPerPage);\r\n//   const startIndex = (currentPage - 1) * rowsPerPage;\r\n//   const currentEntries = filtered.slice(startIndex, startIndex + rowsPerPage);\r\n\r\n//   // Summary metrics\r\n//   const totalAmount = filtered.reduce((sum, t) => sum + t.amount, 0);\r\n//   const totalPaid = filtered.filter(t => t.status === 'Paid').reduce((sum, t) => sum + t.amount, 0);\r\n//   const totalPending = filtered.filter(t => t.status === 'Pending').reduce((sum, t) => sum + t.amount, 0);\r\n\r\n//   return (\r\n//     <div className=\"flex min-h-screen bg-gray-100 dark:bg-gray-900 transition-colors duration-300\">\r\n//       {/* Sidebar - Redesigned */}\r\n//       <div className=\"w-64 bg-indigo-700 dark:bg-gray-800 shadow-md p-4 flex flex-col text-white\">\r\n//         <div className=\"flex items-center mb-8\">\r\n//           <div className=\"w-10 h-10 rounded-full bg-white flex items-center justify-center mr-3\">\r\n//             <span className=\"text-indigo-700 font-bold text-xl\">$</span>\r\n//           </div>\r\n//           <h2 className=\"text-xl font-bold\">Finance Dashboard</h2>\r\n//         </div>\r\n        \r\n//         {/* Main Navigation */}\r\n//         <nav className=\"space-y-1 mb-8\">\r\n//           <button \r\n//             onClick={() => { setActiveTab('dashboard'); setShowTransactions(false); }}\r\n//             className={`flex items-center w-full p-3 rounded-lg ${activeTab === 'dashboard' ? 'bg-indigo-800 dark:bg-gray-700' : 'hover:bg-indigo-600 dark:hover:bg-gray-700'}`}\r\n//           >\r\n//             <span className=\"mr-3\">üìä</span>\r\n//             Dashboard\r\n//           </button>\r\n          \r\n//           <button \r\n//             onClick={() => { setActiveTab('transactions'); setShowTransactions(true); }}\r\n//             className={`flex items-center w-full p-3 rounded-lg ${activeTab === 'transactions' ? 'bg-indigo-800 dark:bg-gray-700' : 'hover:bg-indigo-600 dark:hover:bg-gray-700'}`}\r\n//           >\r\n//             <span className=\"mr-3\">üí≥</span>\r\n//             Transactions\r\n//           </button>\r\n          \r\n//           <button \r\n//             onClick={() => setActiveTab('accounts')}\r\n//             className={`flex items-center w-full p-3 rounded-lg ${activeTab === 'accounts' ? 'bg-indigo-800 dark:bg-gray-700' : 'hover:bg-indigo-600 dark:hover:bg-gray-700'}`}\r\n//           >\r\n//             <span className=\"mr-3\">üè¶</span>\r\n//             Accounts\r\n//           </button>\r\n          \r\n//           <button \r\n//             onClick={() => setActiveTab('reports')}\r\n//             className={`flex items-center w-full p-3 rounded-lg ${activeTab === 'reports' ? 'bg-indigo-800 dark:bg-gray-700' : 'hover:bg-indigo-600 dark:hover:bg-gray-700'}`}\r\n//           >\r\n//             <span className=\"mr-3\">üìà</span>\r\n//             Reports\r\n//           </button>\r\n          \r\n//           <button \r\n//             onClick={() => setActiveTab('settings')}\r\n//             className={`flex items-center w-full p-3 rounded-lg ${activeTab === 'settings' ? 'bg-indigo-800 dark:bg-gray-700' : 'hover:bg-indigo-600 dark:hover:bg-gray-700'}`}\r\n//           >\r\n//             <span className=\"mr-3\">‚öôÔ∏è</span>\r\n//             Settings\r\n//           </button>\r\n//         </nav>\r\n        \r\n//         {/* Recent Transactions Section */}\r\n//         <div className=\"mt-auto\">\r\n//           <h3 className=\"text-sm font-semibold uppercase tracking-wider mb-2 opacity-70\">Recent Transactions</h3>\r\n//           <div className=\"space-y-3\">\r\n//             {recentTransactions.map((t) => (\r\n//               <div key={t._id} className=\"flex justify-between items-center p-2 bg-indigo-600 dark:bg-gray-700 rounded-lg\">\r\n//                 <div>\r\n//                   <p className=\"text-sm font-medium\">{t.category || 'Other'}</p>\r\n//                   <p className=\"text-xs opacity-80\">{new Date(t.date).toLocaleDateString()}</p>\r\n//                 </div>\r\n//                 <div className={`text-sm font-bold ${t.status === 'Paid' ? 'text-green-300' : 'text-yellow-300'}`}>\r\n//                   ‚Çπ{t.amount}\r\n//                 </div>\r\n//               </div>\r\n//             ))}\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n\r\n//       {/* Main content */}\r\n//       <div className=\"flex-1 p-6\">\r\n//         {/* Header with search and user controls */}\r\n//         <div className=\"flex justify-between items-center mb-8\">\r\n//           <h1 className=\"text-2xl font-bold text-gray-800 dark:text-white\">\r\n//             {activeTab === 'dashboard' && 'Dashboard Overview'}\r\n//             {activeTab === 'transactions' && 'Transaction History'}\r\n//             {activeTab === 'accounts' && 'Accounts Management'}\r\n//             {activeTab === 'reports' && 'Financial Reports'}\r\n//             {activeTab === 'settings' && 'Settings'}\r\n//           </h1>\r\n          \r\n//           <div className=\"flex items-center space-x-4\">\r\n//             <div className=\"relative\">\r\n//               <input\r\n//                 type=\"text\"\r\n//                 className=\"pl-10 pr-4 py-2 border border-gray-300 dark:border-gray-600 rounded-full shadow-sm dark:bg-gray-800 dark:text-white\"\r\n//                 placeholder=\"Search...\"\r\n//                 value={search}\r\n//                 onChange={e => setSearch(e.target.value)}\r\n//               />\r\n//               <span className=\"absolute left-3 top-2.5\">üîç</span>\r\n//             </div>\r\n            \r\n//             <button\r\n//               onClick={() => setDarkMode(d => !d)}\r\n//               className=\"p-2 rounded-full bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600\"\r\n//               title=\"Toggle dark mode\"\r\n//             >\r\n//               {darkMode ? '‚òÄÔ∏è' : 'üåô'}\r\n//             </button>\r\n            \r\n//             <div className=\"flex items-center\">\r\n//               <div className=\"w-8 h-8 rounded-full bg-indigo-600 flex items-center justify-center text-white mr-2\">\r\n//                 {user ? user.charAt(0).toUpperCase() : 'U'}\r\n//               </div>\r\n//               <button\r\n//                 onClick={handleLogout}\r\n//                 className=\"text-sm text-gray-600 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white\"\r\n//               >\r\n//                 Logout\r\n//               </button>\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n\r\n//         {/* Dashboard Content */}\r\n//         {activeTab === 'dashboard' && (\r\n//           <>\r\n//             {/* Summary metrics - Redesigned */}\r\n//             <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\r\n//               <div className=\"bg-white dark:bg-gray-800 rounded-xl shadow p-6 flex items-center\">\r\n//                 <div className=\"p-3 rounded-full bg-blue-100 dark:bg-blue-900 mr-4\">\r\n//                   <span className=\"text-blue-600 dark:text-blue-300\">üí∞</span>\r\n//                 </div>\r\n//                 <div>\r\n//                   <p className=\"text-gray-500 dark:text-gray-400 text-sm\">Total Balance</p>\r\n//                   <p className=\"text-2xl font-bold text-gray-800 dark:text-white\">‚Çπ{totalAmount.toLocaleString()}</p>\r\n//                 </div>\r\n//               </div>\r\n              \r\n//               <div className=\"bg-white dark:bg-gray-800 rounded-xl shadow p-6 flex items-center\">\r\n//                 <div className=\"p-3 rounded-full bg-green-100 dark:bg-green-900 mr-4\">\r\n//                   <span className=\"text-green-600 dark:text-green-300\">‚Üë</span>\r\n//                 </div>\r\n//                 <div>\r\n//                   <p className=\"text-gray-500 dark:text-gray-400 text-sm\">Income</p>\r\n//                   <p className=\"text-2xl font-bold text-gray-800 dark:text-white\">‚Çπ{totalPaid.toLocaleString()}</p>\r\n//                 </div>\r\n//               </div>\r\n              \r\n//               <div className=\"bg-white dark:bg-gray-800 rounded-xl shadow p-6 flex items-center\">\r\n//                 <div className=\"p-3 rounded-full bg-red-100 dark:bg-red-900 mr-4\">\r\n//                   <span className=\"text-red-600 dark:text-red-300\">‚Üì</span>\r\n//                 </div>\r\n//                 <div>\r\n//                   <p className=\"text-gray-500 dark:text-gray-400 text-sm\">Expenses</p>\r\n//                   <p className=\"text-2xl font-bold text-gray-800 dark:text-white\">‚Çπ{totalPending.toLocaleString()}</p>\r\n//                 </div>\r\n//               </div>\r\n              \r\n//               <div className=\"bg-white dark:bg-gray-800 rounded-xl shadow p-6 flex items-center\">\r\n//                 <div className=\"p-3 rounded-full bg-purple-100 dark:bg-purple-900 mr-4\">\r\n//                   <span className=\"text-purple-600 dark:text-purple-300\">üìä</span>\r\n//                 </div>\r\n//                 <div>\r\n//                   <p className=\"text-gray-500 dark:text-gray-400 text-sm\">Total Transactions</p>\r\n//                   <p className=\"text-2xl font-bold text-gray-800 dark:text-white\">{filtered.length}</p>\r\n//                 </div>\r\n//               </div>\r\n//             </div>\r\n\r\n//             {/* Charts Section */}\r\n//             <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\r\n//               {/* Spending Overview Chart */}\r\n//               <div className=\"bg-white dark:bg-gray-800 rounded-xl shadow p-6\">\r\n//                 <div className=\"flex justify-between items-center mb-4\">\r\n//                   <h2 className=\"text-lg font-semibold text-gray-800 dark:text-white\">Spending Overview</h2>\r\n//                   <select \r\n//                     className=\"text-sm border-none bg-gray-100 dark:bg-gray-700 rounded-lg px-3 py-1\"\r\n//                     value={month}\r\n//                     onChange={(e) => setMonth(e.target.value)}\r\n//                   >\r\n//                     <option value=\"\">All Months</option>\r\n//                     {Array.from({ length: 12 }, (_, i) => (\r\n//                       <option key={i + 1} value={i + 1}>\r\n//                         {new Date(0, i).toLocaleString('default', { month: 'long' })}\r\n//                       </option>\r\n//                     ))}\r\n//                   </select>\r\n//                 </div>\r\n//                 <div className=\"h-64\">\r\n//                   <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n//                     <AreaChart data={barData}>\r\n//                       <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#eee\" strokeOpacity={darkMode ? 0.1 : 1} />\r\n//                       <XAxis dataKey=\"name\" stroke={darkMode ? '#aaa' : '#666'} />\r\n//                       <YAxis stroke={darkMode ? '#aaa' : '#666'} />\r\n//                       <Tooltip />\r\n//                       <Area type=\"monotone\" dataKey=\"total\" stroke=\"#8884d8\" fill=\"#8884d8\" fillOpacity={0.2} />\r\n//                     </AreaChart>\r\n//                   </ResponsiveContainer>\r\n//                 </div>\r\n//               </div>\r\n              \r\n//               {/* Categories Chart */}\r\n//               {/* <div className=\"bg-white dark:bg-gray-800 rounded-xl shadow p-6\">\r\n//                 <h2 className=\"text-lg font-semibold text-gray-800 dark:text-white mb-4\">Spending by Category</h2>\r\n//                 <div className=\"h-64\">\r\n//                   <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n//                     <PieChart>\r\n//                       <Pie \r\n//                         data={categoryData} \r\n//                         dataKey=\"value\" \r\n//                         nameKey=\"name\" \r\n//                         cx=\"50%\" \r\n//                         cy=\"50%\" \r\n//                         outerRadius={80} \r\n//                         fill=\"#8884d8\" \r\n//                         label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}\r\n//                       >\r\n//                         {categoryData.map((_, i) => (\r\n//                           <Cell key={i} fill={COLORS[i % COLORS.length]} />\r\n//                         ))}\r\n//                       </Pie>\r\n//                       <Tooltip formatter={(value) => [`‚Çπ${value}`, 'Amount']} />\r\n//                       <Legend />\r\n//                     </PieChart>\r\n//                   </ResponsiveContainer>\r\n//                 </div> */}\r\n//               {/* </div> */}\r\n//             </div>\r\n\r\n//             {/* Recent Transactions Table */}\r\n//             <div className=\"bg-white dark:bg-gray-800 rounded-xl shadow overflow-hidden\">\r\n//               <div className=\"p-6 flex justify-between items-center\">\r\n//                 <h2 className=\"text-lg font-semibold text-gray-800 dark:text-white\">Recent Transactions</h2>\r\n//                 <button \r\n//                   onClick={() => setShowTransactions(true)}\r\n//                   className=\"text-sm text-indigo-600 dark:text-indigo-400 hover:underline\"\r\n//                 >\r\n//                   View All\r\n//                 </button>\r\n//               </div>\r\n              \r\n//               <div className=\"overflow-x-auto\">\r\n//                 <table className=\"w-full\">\r\n//                   <thead className=\"bg-gray-50 dark:bg-gray-700\">\r\n//                     <tr>\r\n//                       <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">Category</th>\r\n//                       <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">Description</th>\r\n//                       <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">Date</th>\r\n//                       <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">Amount</th>\r\n//                       <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">Status</th>\r\n//                     </tr>\r\n//                   </thead>\r\n//                   <tbody className=\"divide-y divide-gray-200 dark:divide-gray-700\">\r\n//                     {transactions.slice(0, 5).map((t) => (\r\n//                       <tr key={t._id} className=\"hover:bg-gray-50 dark:hover:bg-gray-700\">\r\n//                         <td className=\"px-6 py-4 whitespace-nowrap\">\r\n//                           <div className=\"flex items-center\">\r\n//                             <div className=\"flex-shrink-0 h-10 w-10 rounded-full bg-indigo-100 dark:bg-indigo-900 flex items-center justify-center\">\r\n//                               <span className=\"text-indigo-600 dark:text-indigo-300\">üí≥</span>\r\n//                             </div>\r\n//                             <div className=\"ml-4\">\r\n//                               <div className=\"text-sm font-medium text-gray-900 dark:text-white\">{t.category || 'Other'}</div>\r\n//                               <div className=\"text-sm text-gray-500 dark:text-gray-400\">{t.user_id}</div>\r\n//                             </div>\r\n//                           </div>\r\n//                         </td>\r\n//                         <td className=\"px-6 py-4 whitespace-nowrap\">\r\n//                           <div className=\"text-sm text-gray-900 dark:text-white\">{t.description || '-'}</div>\r\n//                         </td>\r\n//                         <td className=\"px-6 py-4 whitespace-nowrap\">\r\n//                           <div className=\"text-sm text-gray-900 dark:text-white\">\r\n//                             {new Date(t.date).toLocaleDateString()}\r\n//                           </div>\r\n//                         </td>\r\n//                         <td className=\"px-6 py-4 whitespace-nowrap\">\r\n//                           <div className=\"text-sm font-medium text-gray-900 dark:text-white\">\r\n//                             ‚Çπ{t.amount}\r\n//                           </div>\r\n//                         </td>\r\n//                         <td className=\"px-6 py-4 whitespace-nowrap\">\r\n//                           <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full \r\n//                             ${t.status === 'Paid' ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200' : \r\n//                               'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200'}`}>\r\n//                             {t.status}\r\n//                           </span>\r\n//                         </td>\r\n//                       </tr>\r\n//                     ))}\r\n//                   </tbody>\r\n//                 </table>\r\n//               </div>\r\n//             </div>\r\n//           </>\r\n//         )}\r\n\r\n//         {/* Transactions Tab Content */}\r\n//         {(activeTab === 'transactions' || showTransactions) && (\r\n//           <div className=\"bg-white dark:bg-gray-800 rounded-xl shadow overflow-hidden\">\r\n//             <div className=\"p-6 flex justify-between items-center\">\r\n//               <h2 className=\"text-lg font-semibold text-gray-800 dark:text-white\">Transaction History</h2>\r\n//               <div className=\"flex space-x-3\">\r\n//                 <button \r\n//                   onClick={exportToCSV}\r\n//                   className=\"px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 text-sm\"\r\n//                 >\r\n//                   Export CSV\r\n//                 </button>\r\n//                 <button \r\n//                   onClick={() => setShowFilters(!showFilters)}\r\n//                   className=\"px-4 py-2 bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-white rounded-lg hover:bg-gray-300 dark:hover:bg-gray-600 text-sm\"\r\n//                 >\r\n//                   {showFilters ? 'Hide Filters' : 'Show Filters'}\r\n//                 </button>\r\n//               </div>\r\n//             </div>\r\n\r\n//             {/* Filters Section */}\r\n//             {showFilters && (\r\n//               <div className=\"px-6 pb-4 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n//                 <select \r\n//                   className=\"p-2 border border-gray-300 dark:border-gray-600 rounded-lg dark:bg-gray-700 dark:text-white\"\r\n//                   value={status}\r\n//                   onChange={(e) => setStatus(e.target.value)}\r\n//                 >\r\n//                   <option value=\"\">All Status</option>\r\n//                   <option value=\"Paid\">Paid</option>\r\n//                   <option value=\"Pending\">Pending</option>\r\n//                 </select>\r\n                \r\n//                 <select \r\n//                   className=\"p-2 border border-gray-300 dark:border-gray-600 rounded-lg dark:bg-gray-700 dark:text-white\"\r\n//                   value={category}\r\n//                   onChange={(e) => setCategory(e.target.value)}\r\n//                 >\r\n//                   <option value=\"\">All Categories</option>\r\n//                   {uniqueCategories.map((cat) => (\r\n//                     <option key={cat}>{cat}</option>\r\n//                   ))}\r\n//                 </select>\r\n                \r\n//                 <input \r\n//                   type=\"number\" \r\n//                   className=\"p-2 border border-gray-300 dark:border-gray-600 rounded-lg dark:bg-gray-700 dark:text-white\"\r\n//                   placeholder=\"Min Amount\"\r\n//                   value={minAmount}\r\n//                   onChange={(e) => setMinAmount(e.target.value)}\r\n//                 />\r\n                \r\n//                 <input \r\n//                   type=\"number\" \r\n//                   className=\"p-2 border border-gray-300 dark:border-gray-600 rounded-lg dark:bg-gray-700 dark:text-white\"\r\n//                   placeholder=\"Max Amount\"\r\n//                   value={maxAmount}\r\n//                   onChange={(e) => setMaxAmount(e.target.value)}\r\n//                 />\r\n//               </div>\r\n//             )}\r\n\r\n//             {/* Transactions Table */}\r\n//             <div className=\"overflow-x-auto\">\r\n//               <table className=\"w-full\">\r\n//                 <thead className=\"bg-gray-50 dark:bg-gray-700\">\r\n//                   <tr>\r\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">User</th>\r\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">Date</th>\r\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">Amount</th>\r\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">Category</th>\r\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">Description</th>\r\n//                     <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">Status</th>\r\n//                   </tr>\r\n//                 </thead>\r\n//                 <tbody className=\"divide-y divide-gray-200 dark:divide-gray-700\">\r\n//                   {currentEntries.length === 0 ? (\r\n//                     <tr>\r\n//                       <td colSpan={6} className=\"px-6 py-4 text-center text-gray-500 dark:text-gray-400\">\r\n//                         No transactions found.\r\n//                       </td>\r\n//                     </tr>\r\n//                   ) : (\r\n//                     currentEntries.map((t) => (\r\n//                       <tr key={t._id} className=\"hover:bg-gray-50 dark:hover:bg-gray-700\">\r\n//                         <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white\">\r\n//                           {t.user_id}\r\n//                         </td>\r\n//                         <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white\">\r\n//                           {new Date(t.date).toLocaleDateString()}\r\n//                         </td>\r\n//                         <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-white\">\r\n//                           ‚Çπ{t.amount}\r\n//                         </td>\r\n//                         <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white\">\r\n//                           {t.category || 'N/A'}\r\n//                         </td>\r\n//                         <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white\">\r\n//                           {t.description || '-'}\r\n//                         </td>\r\n//                         <td className=\"px-6 py-4 whitespace-nowrap\">\r\n//                           <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full \r\n//                             ${t.status === 'Paid' ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200' : \r\n//                               'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200'}`}>\r\n//                             {t.status}\r\n//                           </span>\r\n//                         </td>\r\n//                       </tr>\r\n//                     ))\r\n//                   )}\r\n//                 </tbody>\r\n//               </table>\r\n//             </div>\r\n\r\n//             {/* Pagination */}\r\n//             <div className=\"px-6 py-4 flex items-center justify-between border-t border-gray-200 dark:border-gray-700\">\r\n//               <div className=\"flex-1 flex justify-between sm:hidden\">\r\n//                 <button \r\n//                   onClick={() => setCurrentPage(p => Math.max(1, p - 1))}\r\n//                   disabled={currentPage === 1}\r\n//                   className=\"relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50\"\r\n//                 >\r\n//                   Previous\r\n//                 </button>\r\n//                 <button \r\n//                   onClick={() => setCurrentPage(p => Math.min(totalPages, p + 1))}\r\n//                   disabled={currentPage === totalPages}\r\n//                   className=\"ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50\"\r\n//                 >\r\n//                   Next\r\n//                 </button>\r\n//               </div>\r\n//               <div className=\"hidden sm:flex-1 sm:flex sm:items-center sm:justify-between\">\r\n//                 <div>\r\n//                   <p className=\"text-sm text-gray-700 dark:text-gray-300\">\r\n//                     Showing <span className=\"font-medium\">{startIndex + 1}</span> to <span className=\"font-medium\">{Math.min(startIndex + rowsPerPage, totalEntries)}</span> of <span className=\"font-medium\">{totalEntries}</span> results\r\n//                   </p>\r\n//                 </div>\r\n//                 <div>\r\n//                   <nav className=\"relative z-0 inline-flex rounded-md shadow-sm -space-x-px\" aria-label=\"Pagination\">\r\n//                     <button\r\n//                       onClick={() => setCurrentPage(p => Math.max(1, p - 1))}\r\n//                       disabled={currentPage === 1}\r\n//                       className=\"relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 dark:bg-gray-700 dark:border-gray-600 dark:text-gray-300\"\r\n//                     >\r\n//                       <span className=\"sr-only\">Previous</span>\r\n//                       &larr;\r\n//                     </button>\r\n//                     {Array.from({ length: totalPages }, (_, i) => (\r\n//                       <button\r\n//                         key={i + 1}\r\n//                         onClick={() => setCurrentPage(i + 1)}\r\n//                         className={`relative inline-flex items-center px-4 py-2 border text-sm font-medium ${\r\n//                           currentPage === i + 1\r\n//                             ? 'z-10 bg-indigo-50 border-indigo-500 text-indigo-600 dark:bg-indigo-900 dark:border-indigo-700 dark:text-indigo-200'\r\n//                             : 'bg-white border-gray-300 text-gray-500 hover:bg-gray-50 dark:bg-gray-700 dark:border-gray-600 dark:text-gray-300'\r\n//                         }`}\r\n//                       >\r\n//                         {i + 1}\r\n//                       </button>\r\n//                     ))}\r\n//                     <button\r\n//                       onClick={() => setCurrentPage(p => Math.min(totalPages, p + 1))}\r\n//                       disabled={currentPage === totalPages}\r\n//                       className=\"relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 dark:bg-gray-700 dark:border-gray-600 dark:text-gray-300\"\r\n//                     >\r\n//                       <span className=\"sr-only\">Next</span>\r\n//                       &rarr;\r\n//                     </button>\r\n//                   </nav>\r\n//                 </div>\r\n//               </div>\r\n//             </div>\r\n//           </div>\r\n//         )}\r\n\r\n//         {/* Other Tab Content Placeholders */}\r\n//         {activeTab === 'accounts' && (\r\n//           <div className=\"bg-white dark:bg-gray-800 rounded-xl shadow p-6\">\r\n//             <h2 className=\"text-lg font-semibold text-gray-800 dark:text-white mb-4\">Accounts Management</h2>\r\n//             <p className=\"text-gray-600 dark:text-gray-300\">Your accounts management content will appear here.</p>\r\n//           </div>\r\n//         )}\r\n\r\n//         {activeTab === 'reports' && (\r\n//           <div className=\"bg-white dark:bg-gray-800 rounded-xl shadow p-6\">\r\n//             <h2 className=\"text-lg font-semibold text-gray-800 dark:text-white mb-4\">Financial Reports</h2>\r\n//             <p className=\"text-gray-600 dark:text-gray-300\">Your financial reports will appear here.</p>\r\n//           </div>\r\n//         )}\r\n\r\n//         {activeTab === 'settings' && (\r\n//           <div className=\"bg-white dark:bg-gray-800 rounded-xl shadow p-6\">\r\n//             <h2 className=\"text-lg font-semibold text-gray-800 dark:text-white mb-4\">Settings</h2>\r\n//             <p className=\"text-gray-600 dark:text-gray-300\">Your settings will appear here.</p>\r\n//           </div>\r\n//         )}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default Dashboard;\r\n\r\n// dash board 3\r\n// import { useEffect, useState } from 'react';\r\n// import axios from 'axios';\r\n// import { useNavigate } from 'react-router-dom';\r\n// import {\r\n//   PieChart, Pie, Cell, Tooltip, Legend, BarChart, Bar,\r\n//   XAxis, YAxis, CartesianGrid, ResponsiveContainer\r\n// } from 'recharts';\r\n\r\n// interface Transaction {\r\n//   _id: string;\r\n//   date: string;\r\n//   amount: number;\r\n//   category: string;\r\n//   description?: string;\r\n//   user_id: string;\r\n//   status: 'Paid' | 'Pending';\r\n// }\r\n\r\n// function Dashboard() {\r\n//   const [transactions, setTransactions] = useState<Transaction[]>([]);\r\n//   const [filtered, setFiltered] = useState<Transaction[]>([]);\r\n//   const [month, setMonth] = useState('');\r\n//   const [status, setStatus] = useState('');\r\n//   const [category, setCategory] = useState('');\r\n//   const [user, setUser] = useState('');\r\n//   const [minAmount, setMinAmount] = useState('');\r\n//   const [maxAmount, setMaxAmount] = useState('');\r\n//   const [groupByWeek, setGroupByWeek] = useState(false);\r\n//   const [startDate, setStartDate] = useState('');\r\n//   const [endDate, setEndDate] = useState('');\r\n//   const [currentPage, setCurrentPage] = useState(1);\r\n//   const rowsPerPage = 10;\r\n//   const [error, setError] = useState('');\r\n//   const [search, setSearch] = useState('');\r\n//   const [darkMode, setDarkMode] = useState(() => {\r\n//     if (typeof window !== \"undefined\") {\r\n//       const stored = localStorage.getItem('dashboard-darkmode');\r\n//       if (stored) return stored === 'true';\r\n//       return window.matchMedia('(prefers-color-scheme: dark)').matches;\r\n//     }\r\n//     return false;\r\n//   });\r\n//   const [showFilters, setShowFilters] = useState(false);\r\n\r\n//   // Sidebar navigation\r\n//   const [activeView, setActiveView] = useState<'dashboard' | 'transactions' | 'analytics' | 'wallet' | 'messages' | 'settings'>('dashboard');\r\n\r\n//   const navigate = useNavigate();\r\n//   const COLORS = ['#8884d8', '#82ca9d', '#ffc658', '#ff7f50', '#00c49f', '#ffb6b9'];\r\n\r\n//   useEffect(() => {\r\n//     if (darkMode) {\r\n//       document.documentElement.classList.add('dark');\r\n//       localStorage.setItem('dashboard-darkmode', 'true');\r\n//     } else {\r\n//       document.documentElement.classList.remove('dark');\r\n//       localStorage.setItem('dashboard-darkmode', 'false');\r\n//     }\r\n//   }, [darkMode]);\r\n\r\n//   useEffect(() => {\r\n//     const fetchTransactions = async () => {\r\n//       try {\r\n//         const token = localStorage.getItem('token');\r\n//         const res = await axios.get('http://localhost:5000/api/transactions', {\r\n//           headers: { Authorization: `Bearer ${token}` },\r\n//         });\r\n//         const data = Array.isArray(res.data) ? res.data : res.data.transactions || [];\r\n//         setTransactions(data);\r\n//         setFiltered(data);\r\n//       } catch (err) {\r\n//         setError('Failed to load transactions');\r\n//       }\r\n//     };\r\n//     fetchTransactions();\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     let result = [...transactions];\r\n\r\n//     if (month) result = result.filter((t) => new Date(t.date).getMonth() + 1 === Number(month));\r\n//     if (status) result = result.filter((t) => t.status === status);\r\n//     if (category) result = result.filter((t) => t.category === category);\r\n//     if (user) result = result.filter((t) => t.user_id === user);\r\n//     if (minAmount) result = result.filter((t) => t.amount >= parseFloat(minAmount));\r\n//     if (maxAmount) result = result.filter((t) => t.amount <= parseFloat(maxAmount));\r\n//     if (startDate) result = result.filter((t) => new Date(t.date) >= new Date(startDate));\r\n//     if (endDate) result = result.filter((t) => new Date(t.date) <= new Date(endDate));\r\n\r\n//     if (search.trim()) {\r\n//       const s = search.trim().toLowerCase();\r\n//       result = result.filter((t) =>\r\n//         t.user_id?.toLowerCase().includes(s) ||\r\n//         t.status?.toLowerCase().includes(s) ||\r\n//         t.category?.toLowerCase().includes(s) ||\r\n//         t.description?.toLowerCase().includes(s) ||\r\n//         t.amount.toString().includes(s) ||\r\n//         new Date(t.date).toLocaleDateString().toLowerCase().includes(s)\r\n//       );\r\n//     }\r\n\r\n//     setCurrentPage(1);\r\n//     setFiltered(result);\r\n//   }, [\r\n//     month, status, category, user, minAmount, maxAmount,\r\n//     startDate, endDate, transactions, search\r\n//   ]);\r\n\r\n//   const exportToCSV = () => {\r\n//     const header = 'User ID,Status,Date,Amount,Category,Description\\n';\r\n//     const rows = filtered\r\n//       .map((t) => {\r\n//         const date = new Date(t.date).toISOString().split('T')[0];\r\n//         return `${t.user_id},${t.status},${date},${t.amount},${t.category || 'N/A'},${t.description || '-'}`;\r\n//       })\r\n//       .join('\\n');\r\n//     const blob = new Blob([header + rows], { type: 'text/csv' });\r\n//     const url = URL.createObjectURL(blob);\r\n//     const a = document.createElement('a');\r\n//     a.href = url;\r\n//     a.download = 'transactions.csv';\r\n//     a.click();\r\n//     URL.revokeObjectURL(url);\r\n//   };\r\n\r\n//   const handleLogout = () => {\r\n//     localStorage.removeItem('token');\r\n//     navigate('/');\r\n//   };\r\n\r\n//   const uniqueCategories = Array.from(new Set(transactions.map((t) => t.category)));\r\n//   const uniqueUsers = Array.from(new Set(transactions.map((t) => t.user_id)));\r\n\r\n//   const getWeek = (dateStr: string) => {\r\n//     const date = new Date(dateStr);\r\n//     const firstDay = new Date(date.getFullYear(), date.getMonth(), 1);\r\n//     const dayOfWeek = firstDay.getDay();\r\n//     const adjustedDate = date.getDate() + dayOfWeek;\r\n//     return Math.ceil(adjustedDate / 7);\r\n//   };\r\n\r\n//   const categoryData = Object.entries(\r\n//     filtered.reduce((acc, t) => {\r\n//       const key = t.category || 'Uncategorized';\r\n//       acc[key] = (acc[key] || 0) + t.amount;\r\n//       return acc;\r\n//     }, {} as Record<string, number>)\r\n//   ).map(([name, value]) => ({ name, value }));\r\n\r\n//   const barData = groupByWeek\r\n//     ? Array.from({ length: 12 }, (_, i) => {\r\n//         const monthName = new Date(0, i).toLocaleString('default', { month: 'short' });\r\n//         const weeks = [0, 0, 0, 0, 0];\r\n//         filtered\r\n//           .filter((t) => new Date(t.date).getMonth() === i)\r\n//           .forEach((t) => {\r\n//             const week = getWeek(t.date);\r\n//             weeks[week - 1] += t.amount;\r\n//           });\r\n//         return { name: monthName, ...weeks.reduce((acc, val, idx) => ({ ...acc, [`W${idx + 1}`]: val }), {}) };\r\n//       })\r\n//     : Array.from({ length: 12 }, (_, i) => {\r\n//         const monthName = new Date(0, i).toLocaleString('default', { month: 'short' });\r\n//         const total = filtered\r\n//           .filter((t) => new Date(t.date).getMonth() === i)\r\n//           .reduce((sum, t) => sum + t.amount, 0);\r\n//         return { name: monthName, total };\r\n//       });\r\n\r\n//   const totalEntries = filtered.length;\r\n//   const totalPages = Math.ceil(totalEntries / rowsPerPage);\r\n//   const startIndex = (currentPage - 1) * rowsPerPage;\r\n//   const currentEntries = filtered.slice(startIndex, startIndex + rowsPerPage);\r\n\r\n//   // Summary metrics\r\n//   const totalAmount = filtered.reduce((sum, t) => sum + t.amount, 0);\r\n//   const totalPaid = filtered.filter(t => t.status === 'Paid').reduce((sum, t) => sum + t.amount, 0);\r\n//   const totalPending = filtered.filter(t => t.status === 'Pending').reduce((sum, t) => sum + t.amount, 0);\r\n\r\n//   return (\r\n//     <div className=\"flex min-h-screen bg-gray-100 dark:bg-gray-900 transition-colors duration-300\">\r\n//       {/* Sidebar */}\r\n//       <div className=\"w-64 bg-white dark:bg-gray-800 shadow-md p-4 flex flex-col\">\r\n//         <h2 className=\"text-xl font-bold mb-6 text-blue-600 dark:text-blue-300\">Looper.ai</h2>\r\n//         {/* Sidebar Menu Items */}\r\n//         <nav className=\"flex-1 space-y-2 mb-6\">\r\n//           <button\r\n//             onClick={() => setActiveView('dashboard')}\r\n//             className={`flex items-center w-full p-2 rounded hover:bg-blue-100 dark:hover:bg-gray-700 text-gray-700 dark:text-gray-200 ${activeView === 'dashboard' ? 'bg-blue-50 dark:bg-gray-700' : ''}`}>\r\n//             <span className=\"mr-3\">üìä</span>\r\n//             <span>Dashboard</span>\r\n//           </button>\r\n//           <button\r\n//             onClick={() => setActiveView('transactions')}\r\n//             className={`flex items-center w-full p-2 rounded hover:bg-blue-100 dark:hover:bg-gray-700 text-gray-700 dark:text-gray-200 ${activeView === 'transactions' ? 'bg-blue-50 dark:bg-gray-700' : ''}`}>\r\n//             <span className=\"mr-3\">üí∞</span>\r\n//             <span>Transactions</span>\r\n//           </button>\r\n//           <button\r\n//             onClick={() => setActiveView('analytics')}\r\n//             className={`flex items-center w-full p-2 rounded hover:bg-blue-100 dark:hover:bg-gray-700 text-gray-700 dark:text-gray-200 ${activeView === 'analytics' ? 'bg-blue-50 dark:bg-gray-700' : ''}`}>\r\n//             <span className=\"mr-3\">üìà</span>\r\n//             <span>Analytics</span>\r\n//           </button>\r\n//           <button\r\n//             onClick={() => setActiveView('wallet')}\r\n//             className={`flex items-center w-full p-2 rounded hover:bg-blue-100 dark:hover:bg-gray-700 text-gray-700 dark:text-gray-200 ${activeView === 'wallet' ? 'bg-blue-50 dark:bg-gray-700' : ''}`}>\r\n//             <span className=\"mr-3\">üëõ</span>\r\n//             <span>Wallet</span>\r\n//           </button>\r\n//           <button\r\n//             onClick={() => setActiveView('messages')}\r\n//             className={`flex items-center w-full p-2 rounded hover:bg-blue-100 dark:hover:bg-gray-700 text-gray-700 dark:text-gray-200 ${activeView === 'messages' ? 'bg-blue-50 dark:bg-gray-700' : ''}`}>\r\n//             <span className=\"mr-3\">üí¨</span>\r\n//             <span>Messages</span>\r\n//           </button>\r\n//           <button\r\n//             onClick={() => setActiveView('settings')}\r\n//             className={`flex items-center w-full p-2 rounded hover:bg-blue-100 dark:hover:bg-gray-700 text-gray-700 dark:text-gray-200 ${activeView === 'settings' ? 'bg-blue-50 dark:bg-gray-700' : ''}`}>\r\n//             <span className=\"mr-3\">‚öôÔ∏è</span>\r\n//             <span>Settings</span>\r\n//           </button>\r\n//         </nav>\r\n\r\n//         {/* Filter toggle button */}\r\n//         <button\r\n//           onClick={() => setShowFilters(!showFilters)}\r\n//           className=\"flex items-center justify-between w-full p-2 mb-2 rounded hover:bg-gray-100 dark:hover:bg-gray-700\"\r\n//         >\r\n//           <span className=\"font-medium\">Filters</span>\r\n//           <span>{showFilters ? '‚ñ≤' : '‚ñº'}</span>\r\n//         </button>\r\n\r\n//         {/* Filters section - conditionally rendered */}\r\n//         {showFilters && (\r\n//           <div className=\"space-y-4 mb-4\">\r\n//             <select className=\"w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600 dark:text-gray-100\" value={month} onChange={(e) => setMonth(e.target.value)}>\r\n//               <option value=\"\">All Months</option>\r\n//               {Array.from({ length: 12 }, (_, i) => (\r\n//                 <option key={i + 1} value={i + 1}>\r\n//                   {new Date(0, i).toLocaleString('default', { month: 'long' })}\r\n//                 </option>\r\n//               ))}\r\n//             </select>\r\n\r\n//             <select className=\"w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600 dark:text-gray-100\" value={status} onChange={(e) => setStatus(e.target.value)}>\r\n//               <option value=\"\">All Status</option>\r\n//               <option value=\"Paid\">Paid</option>\r\n//               <option value=\"Pending\">Pending</option>\r\n//             </select>\r\n\r\n//             <select className=\"w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600 dark:text-gray-100\" value={category} onChange={(e) => setCategory(e.target.value)}>\r\n//               <option value=\"\">All Categories</option>\r\n//               {uniqueCategories.map((cat) => (\r\n//                 <option key={cat}>{cat}</option>\r\n//               ))}\r\n//             </select>\r\n\r\n//             <select className=\"w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600 dark:text-gray-100\" value={user} onChange={(e) => setUser(e.target.value)}>\r\n//               <option value=\"\">All Users</option>\r\n//               {uniqueUsers.map((u) => (\r\n//                 <option key={u}>{u}</option>\r\n//               ))}\r\n//             </select>\r\n\r\n//             <input type=\"number\" className=\"w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600 dark:text-gray-100\" placeholder=\"Min ‚Çπ\" value={minAmount} onChange={(e) => setMinAmount(e.target.value)} />\r\n//             <input type=\"number\" className=\"w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600 dark:text-gray-100\" placeholder=\"Max ‚Çπ\" value={maxAmount} onChange={(e) => setMaxAmount(e.target.value)} />\r\n\r\n//             <input type=\"date\" className=\"w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600 dark:text-gray-100\" value={startDate} onChange={(e) => setStartDate(e.target.value)} />\r\n//             <input type=\"date\" className=\"w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600 dark:text-gray-100\" value={endDate} onChange={(e) => setEndDate(e.target.value)} />\r\n\r\n//             <div className=\"flex space-x-2\">\r\n//               <button onClick={exportToCSV} className=\"flex-1 bg-green-600 text-white px-2 py-1 rounded hover:bg-green-700 text-sm\">Export CSV</button>\r\n//               <button onClick={() => {\r\n//                 setMonth(''); setStatus(''); setCategory(''); setUser('');\r\n//                 setMinAmount(''); setMaxAmount(''); setStartDate('');\r\n//                 setEndDate(''); setGroupByWeek(false); setCurrentPage(1);\r\n//                 setFiltered(transactions);\r\n//                 setSearch('');\r\n//               }} className=\"flex-1 bg-gray-500 text-white px-2 py-1 rounded hover:bg-gray-600 text-sm\">Reset</button>\r\n//             </div>\r\n//           </div>\r\n//         )}\r\n//       </div>\r\n\r\n//       {/* Main content */}\r\n//       <div className=\"flex-1 p-6\">\r\n//         {/* Header with search and dark mode toggle */}\r\n//         <div className=\"flex justify-between items-center mb-6\">\r\n//           <h1 className=\"text-3xl font-bold text-blue-600 dark:text-blue-300\">\r\n//             {activeView === 'dashboard' ? 'Dashboard' :\r\n//               activeView === 'transactions' ? 'Transactions' :\r\n//                 activeView.charAt(0).toUpperCase() + activeView.slice(1)}\r\n//           </h1>\r\n//           <div className=\"flex gap-3 items-center\">\r\n//             <input\r\n//               type=\"text\"\r\n//               className=\"p-2 border border-gray-300 dark:border-gray-700 rounded shadow-sm dark:bg-gray-800 dark:text-gray-100\"\r\n//               placeholder=\"üîç Search transactions...\"\r\n//               value={search}\r\n//               onChange={e => setSearch(e.target.value)}\r\n//             />\r\n//             <button\r\n//               onClick={() => setDarkMode(d => !d)}\r\n//               className=\"rounded px-3 py-2 text-xl focus:outline-none bg-gray-200 dark:bg-gray-700 dark:text-yellow-300 text-gray-800 hover:bg-gray-300 dark:hover:bg-gray-600 transition\"\r\n//               title=\"Toggle dark mode\"\r\n//             >\r\n//               {darkMode ? '‚òÄÔ∏è' : 'üåô'}\r\n//             </button>\r\n//             <button\r\n//               onClick={handleLogout}\r\n//               className=\"bg-red-600 text-white px-4 py-2 rounded hover:bg-red-700\"\r\n//             >\r\n//               Logout\r\n//             </button>\r\n//           </div>\r\n//         </div>\r\n\r\n//         {/* DASHBOARD VIEW */}\r\n//         {activeView === 'dashboard' && (\r\n//           <>\r\n//             {/* Summary metrics */}\r\n//             <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-8\">\r\n//               <div className=\"bg-white dark:bg-gray-800 rounded shadow p-4 flex flex-col items-center\">\r\n//                 <span className=\"text-gray-500 dark:text-gray-400 text-sm\">Total Transactions</span>\r\n//                 <span className=\"text-2xl font-bold text-blue-700 dark:text-blue-300\">{filtered.length}</span>\r\n//               </div>\r\n//               <div className=\"bg-white dark:bg-gray-800 rounded shadow p-4 flex flex-col items-center\">\r\n//                 <span className=\"text-gray-500 dark:text-gray-400 text-sm\">Total Amount</span>\r\n//                 <span className=\"text-2xl font-bold text-green-700 dark:text-green-400\">‚Çπ{totalAmount.toLocaleString()}</span>\r\n//               </div>\r\n//               <div className=\"bg-white dark:bg-gray-800 rounded shadow p-4 flex flex-col items-center\">\r\n//                 <span className=\"text-gray-500 dark:text-gray-400 text-sm\">Paid Amount</span>\r\n//                 <span className=\"text-2xl font-bold text-green-600 dark:text-green-300\">‚Çπ{totalPaid.toLocaleString()}</span>\r\n//               </div>\r\n//               <div className=\"bg-white dark:bg-gray-800 rounded shadow p-4 flex flex-col items-center\">\r\n//                 <span className=\"text-gray-500 dark:text-gray-400 text-sm\">Pending Amount</span>\r\n//                 <span className=\"text-2xl font-bold text-yellow-600 dark:text-yellow-400\">‚Çπ{totalPending.toLocaleString()}</span>\r\n//               </div>\r\n//             </div>\r\n\r\n//             {error && <p className=\"text-red-500 mb-4\">{error}</p>}\r\n\r\n//             {/* Charts */}\r\n//             <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8\">\r\n//               <div className=\"bg-white dark:bg-gray-800 rounded shadow p-4\">\r\n//                 <h2 className=\"text-xl font-semibold mb-4 text-blue-600 dark:text-blue-300\">üìà Spending by Category</h2>\r\n//                 <ResponsiveContainer width=\"100%\" height={300}>\r\n//                   <PieChart>\r\n//                     <Pie data={categoryData} dataKey=\"value\" nameKey=\"name\" cx=\"50%\" cy=\"50%\" outerRadius={100} fill=\"#8884d8\" label>\r\n//                       {categoryData.map((_, i) => <Cell key={i} fill={COLORS[i % COLORS.length]} />)}\r\n//                     </Pie>\r\n//                     <Tooltip />\r\n//                     <Legend />\r\n//                   </PieChart>\r\n//                 </ResponsiveContainer>\r\n//               </div>\r\n//               <div className=\"bg-white dark:bg-gray-800 rounded shadow p-4\">\r\n//                 <h2 className=\"text-xl font-semibold mb-4 text-green-600 dark:text-green-300\">üìä Monthly Spending</h2>\r\n//                 <ResponsiveContainer width=\"100%\" height={300}>\r\n//                   <BarChart data={barData}>\r\n//                     <CartesianGrid strokeDasharray=\"3 3\" />\r\n//                     <XAxis dataKey=\"name\" stroke={darkMode ? '#ddd' : '#333'} />\r\n//                     <YAxis stroke={darkMode ? '#ddd' : '#333'} />\r\n//                     <Tooltip />\r\n//                     <Legend />\r\n//                     {groupByWeek\r\n//                       ? ['W1', 'W2', 'W3', 'W4', 'W5'].map((w, i) => <Bar key={w} dataKey={w} fill={COLORS[i % COLORS.length]} />)\r\n//                       : <Bar dataKey=\"total\" fill=\"#82ca9d\" />}\r\n//                   </BarChart>\r\n//                 </ResponsiveContainer>\r\n//               </div>\r\n//             </div>\r\n\r\n//             {/* Group by week toggle */}\r\n//             <div className=\"flex justify-between items-center mb-4\">\r\n//               <label className=\"flex items-center gap-2 text-sm dark:text-gray-300\">\r\n//                 <input type=\"checkbox\" checked={groupByWeek} onChange={(e) => setGroupByWeek(e.target.checked)} />\r\n//                 Group by Week\r\n//               </label>\r\n//               <div className=\"text-sm text-gray-600 dark:text-gray-300\">\r\n//                 Showing {startIndex + 1}‚Äì{Math.min(startIndex + rowsPerPage, totalEntries)} of {totalEntries} entries\r\n//               </div>\r\n//             </div>\r\n//           </>\r\n//         )}\r\n\r\n//         {/* TRANSACTIONS VIEW */}\r\n//         {activeView === 'transactions' && (\r\n//           <div className=\"bg-white dark:bg-gray-800 rounded shadow overflow-hidden\">\r\n//             <table className=\"min-w-full divide-y divide-gray-200 dark:divide-gray-700\">\r\n//               <thead className=\"bg-gray-50 dark:bg-gray-900\">\r\n//                 <tr>\r\n//                   <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">Date</th>\r\n//                   <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">Amount</th>\r\n//                   <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">Category</th>\r\n//                   <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">Description</th>\r\n//                   <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">Status</th>\r\n//                 </tr>\r\n//               </thead>\r\n//               <tbody className=\"bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700\">\r\n//                 {currentEntries.map((transaction) => (\r\n//                   <tr key={transaction._id} className=\"hover:bg-gray-50 dark:hover:bg-gray-700\">\r\n//                     <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-200\">\r\n//                       {new Date(transaction.date).toLocaleDateString()}\r\n//                     </td>\r\n//                     <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-200\">\r\n//                       ‚Çπ{transaction.amount.toLocaleString()}\r\n//                     </td>\r\n//                     <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-200\">\r\n//                       {transaction.category}\r\n//                     </td>\r\n//                     <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-200\">\r\n//                       {transaction.description || '-'}\r\n//                     </td>\r\n//                     <td className=\"px-6 py-4 whitespace-nowrap text-sm\">\r\n//                       <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${\r\n//                         transaction.status === 'Paid'\r\n//                           ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200'\r\n//                           : 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200'\r\n//                       }`}>\r\n//                         {transaction.status}\r\n//                       </span>\r\n//                     </td>\r\n//                   </tr>\r\n//                 ))}\r\n//               </tbody>\r\n//             </table>\r\n\r\n//             {/* Pagination */}\r\n//             <div className=\"px-4 py-3 flex items-center justify-between border-t border-gray-200 dark:border-gray-700 sm:px-6\">\r\n//               <div className=\"flex-1 flex justify-between sm:hidden\">\r\n//                 <button onClick={() => setCurrentPage(p => Math.max(1, p - 1))} disabled={currentPage === 1} className=\"relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50\">\r\n//                   Previous\r\n//                 </button>\r\n//                 <button onClick={() => setCurrentPage(p => Math.min(totalPages, p + 1))} disabled={currentPage === totalPages} className=\"ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50\">\r\n//                   Next\r\n//                 </button>\r\n//               </div>\r\n//               <div className=\"hidden sm:flex-1 sm:flex sm:items-center sm:justify-between\">\r\n//                 <div>\r\n//                   <p className=\"text-sm text-gray-700 dark:text-gray-300\">\r\n//                     Showing <span className=\"font-medium\">{startIndex + 1}</span> to <span className=\"font-medium\">{Math.min(startIndex + rowsPerPage, totalEntries)}</span> of{' '}\r\n//                     <span className=\"font-medium\">{totalEntries}</span> results\r\n//                   </p>\r\n//                 </div>\r\n//                 <div>\r\n//                   <nav className=\"relative z-0 inline-flex rounded-md shadow-sm -space-x-px\" aria-label=\"Pagination\">\r\n//                     <button onClick={() => setCurrentPage(p => Math.max(1, p - 1))} disabled={currentPage === 1} className=\"relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 text-sm font-medium text-gray-500 dark:text-gray-400 hover:bg-gray-50 dark:hover:bg-gray-700\">\r\n//                       Previous\r\n//                     </button>\r\n//                     {Array.from({ length: totalPages }, (_, i) => i + 1).map(page => (\r\n//                       <button key={page} onClick={() => setCurrentPage(page)} className={`relative inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 text-sm font-medium ${currentPage === page ? 'text-blue-600 dark:text-blue-400' : 'text-gray-700 dark:text-gray-300'} hover:bg-gray-50 dark:hover:bg-gray-700`}>\r\n//                         {page}\r\n//                       </button>\r\n//                     ))}\r\n//                     <button onClick={() => setCurrentPage(p => Math.min(totalPages, p + 1))} disabled={currentPage === totalPages} className=\"relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 text-sm font-medium text-gray-500 dark:text-gray-400 hover:bg-gray-50 dark:hover:bg-gray-700\">\r\n//                       Next\r\n//                     </button>\r\n//                   </nav>\r\n//                 </div>\r\n//               </div>\r\n//             </div>\r\n//           </div>\r\n//         )}\r\n\r\n//         {/* ANALYTICS VIEW */}\r\n//         {activeView === 'analytics' && (\r\n//           <div className=\"text-center py-10 text-gray-600 dark:text-gray-300\">\r\n//             <h2 className=\"text-2xl font-semibold mb-2\">Analytics</h2>\r\n//             <p>Analytics content will appear here.</p>\r\n//           </div>\r\n//         )}\r\n\r\n//         {/* WALLET VIEW */}\r\n//         {activeView === 'wallet' && (\r\n//           <div className=\"text-center py-10 text-gray-600 dark:text-gray-300\">\r\n//             <h2 className=\"text-2xl font-semibold mb-2\">Wallet</h2>\r\n//             <p>Wallet content will appear here.</p>\r\n//           </div>\r\n//         )}\r\n\r\n//         {/* MESSAGES VIEW */}\r\n//         {activeView === 'messages' && (\r\n//           <div className=\"text-center py-10 text-gray-600 dark:text-gray-300\">\r\n//             <h2 className=\"text-2xl font-semibold mb-2\">Messages</h2>\r\n//             <p>Messages content will appear here.</p>\r\n//           </div>\r\n//         )}\r\n\r\n//         {/* SETTINGS VIEW */}\r\n//         {activeView === 'settings' && (\r\n//           <div className=\"text-center py-10 text-gray-600 dark:text-gray-300\">\r\n//             <h2 className=\"text-2xl font-semibold mb-2\">Settings</h2>\r\n//             <p>Settings content will appear here.</p>\r\n//           </div>\r\n//         )}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default Dashboard;\r\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}